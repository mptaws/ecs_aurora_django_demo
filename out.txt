    1  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    2  brew help
    3  brew cask install iterm2
    4  open ~/Library/Application\ Support/Microsoft/Office/User\ Templates/My\ Templates/
    5  open ~/Library/Application\ Support
    6  open /Library/Application\ Support
    7  open ~/Library/Group\ Containers
    8  brew cask install spectacle
    9  brew cask install drawio
   10  brew install brightness
   11  brightness
   12  brightness -2 50
   13  brightness -d 2 50
   14  brightness -d 2 0.5
   15  cd /Users/tuszym/
   16  /Applications/Firefox.app/Contents/macOS/firefox -profile /Users/tuszym/Library/Caches/Firefox/Profiles/3k1qw70a.Work
   17  /Applications/Firefox.app/Contents/macOS/firefox -profile /Users/tuszym/Library/Application\ Support/Firefox/Profiles/3k1qw70a.Work
   18  /Applications/Firefox.app/Contents/macOS/firefox -P "Work"
   19  cd Library/Application\ Support/
   20  cd /Library/PrivilegedHelperTools
   21  rm -rf com.microsoft.autoupdate.helper
   22  sudo rm -rf com.microsoft.autoupdate.helper
   23  compaudit | xargs chmod g-w,o-w
   24  chmod 755 /usr/local/share/zsh
   25  chmod 755 /usr/local/share/zsh/site-functions
   26  mkdir coderepo
   27  git clone https://github.com/todotxt/todo.txt-cli.git
   28  rm -rf todo.txt-cli
   29  which
   30  h -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
   31  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
   32  alias L
   33  L
   34  alias g
   35  atom 
   36  atom ~/.oh-my-zsh/oh-my-zsh.sh
   37  python -v
   38  python -V
   39  brew cask install sambadevi/powerlevel9k
   40  bresk install --cask sambadevi/powerlevel9k
   41  brew install --cask sambadevi/powerlevel9k
   42  brew install powerlevel9k
   43  git clone https://github.com/bhilburn/powerlevel9k.git ~/powerlevel9k
   44  cd powerlevel9k
   45  mv powerlevel9k.zsh-theme ~/.oh-my-zsh/themes
   46  vi ~/.zshrc
   47  wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf\nwget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf
   48  which wget
   49  git clone https://github.com/powerline/fonts.git --depth=1\n# install\ncd fonts\n./install.sh\n# clean-up a bit\ncd ..\nrm -rf fonts
   50  atom ~/.zshrc 
   51  brew
   52  echo 'export PATH="/usr/local/sbin:$PATH"' >> ~/.zshrc
   53  rm /usr/local/opt/openssl/*
   54  rm -rf /usr/local/opt/openssl
   55  sudo rm -rf /usr/local/opt/openssl
   56  brew install wget
   57  wget
   58  brew install python3
   59  brew postinstall python3
   60  chsh -s /bin/bash
   61  atom ~/.oh-my-zsh
   62  t test
   63  rm -rf powerlevel9k
   64  dirname "$0"
   65  dirname
   66  cd Documents
   67  mkdir todo
   68  t add test2
   69  source ~/.todo.cfg
   70  t lsit
   71  cd /usr/local/opt/todo-txt
   72  atom todo.cfg
   73  t add test 1
   74  t add test 2
   75  t list
   76  echo 'export PATH="/usr/local/opt/python/libexec/bin:$PATH"' >> ~/.zshrc
   77  python -m pip install --upgrade setuptools
   78  cd coderepo
   79  ls -al ~/.ssh
   80  ssh-keygen -t ed25519 -C "tuszym@amazon.com"
   81  touch ~/.ssh/config
   82  ssh-add -K ~/.ssh/id_ed25519
   83  alias > @K!
   84  alias > ~/aliases.txt
   85  atom ~/aliases.txt
   86  atom ~/.zshrc
   87  cd plugins
   88  cd git
   89  cat git.plugin.zsh
   90  atom ~/.oh-my-zsh/custom/aliases.zsh
   91  mkdir /usr/local/share/zsh/site-functions/_brew_cask
   92  touch /usr/local/share/zsh/site-functions/_brew_cask
   93  cat mpt-alias.zsh
   94  atom mpt-alias.zsh
   95  ra
   96  mv coderepo code
   97  git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k
   98  chmod 777 /usr/local/Cellar/openssl/1.0.2q
   99  sudo chmod 777 /usr/local/Cellar/openssl/1.0.2q
  100  sudo chmod -R 777 /usr/local/Cellar/openssl/1.0.2q
  101  rm -rf /usr/local/Cellar/openssl/1.0.2q
  102  sudo rm -rf /usr/local/Cellar/openssl/1.0.2q
  103  brew upgrade wget
  104  git clone git@github.com/mptaws/ecsworkshop
  105  git clone git@github.com/mptaws/ecsworkshop.git
  106  gcl git@github.com:mptaws/ecsworkshop.git
  107  gfu
  108  git fetch upstream main
  109  git fetch main upstream
  110  git fetch upstream/main
  111  git remote add upstream https://github.com/brentley/ecsworkshop
  112  get fetch upstream
  113  git rebase upstream/main
  114  pip --version
  115  pip install --user git+git://github.com/Lokaltog/powerline --verbose
  116  mkdir evergreen
  117  gcl git@github.com:powerline/fonts.git
  118  open fonts
  119  cd ls
  120  cd themes
  121  brew install font-hack-nerd-font
  122  brew tap homebrew/cask-fonts
  123  brew install --cask font-hack-nerd-font
  124  cd code/
  125  git checkout -b new_test
  126  touch afile.txt
  127  vi afile.txt
  128  git commit -m "test"\n: 1611935049:0;git commit -m "test"
  129  /rp
  131  brew uninstall --ignore-dependencies node
  132  brew uninstall --force node
  133  brew install nvm
  134  mkdir ~/.nvm
  135  nvm -v
  136  nvm install 14.15.4
  137  cd code/ecs
  138  atom .
  139  cp ~/.zshrc /Volumes/Documents
  140  cp ~/.oh-my-zsh/custom/aliases.zsh /Volumes/Documents
  141  c;ear
  142  cd code/ecsworkshop
  143  git reset --hard
  144  git ls remote
  145  git ls-remote
  146  git branch -r
  147  git config --get remote.origin.url
  148  git checkout -b feature/secrets-in-ecs
  149  h
  150  h | grep git
  151  h | grep npm
  152  hugo --version
  153  which hugo
  154  npx hugo --version
  155  npx hugo new --kind chapter secrets/_index.md
  156  npx hugo server
  157  npx hugo new secrets/ssm.md
  158  npx hugo new secrets/ssm/_index.md
  159  npx hugo -h
  160  ssh cloud_user@18.218.107.112
  161  ssh cloud_user@3.139.61.156
  162  ssh cloud_user@f161ba66cd1d.mylabserver.com
  163  ssh cloud_user@52.14.45.137
  164  ssh cloud_user@3.133.84.19
  165  cd evergreen
  166  gcl git@github.com:rebuy-de/aws-nuke.git
  167  vim nuke-work.yaml
  168  aws-nuke -c config/nuke-work.yaml
  169  brew install go
  170  go --version
  171  echo $PATH
  172  brew install aws-nuke
  173  cp ~/Desktop/aws-nuke /usr/local/bin
  174  chmod +x /usr/local/bin/aws-nuke
  175  aws-nuke
  176  brew install aws-cli
  177  brew install awscli
  178  aws-nuke --config config/nuke-work.yaml
  179  atom config/nuke-work.yaml
  180  sudo curl -Lo /usr/local/bin/copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-darwin && sudo chmod +x /usr/local/bin/copilot && copilot --help
  181  docker --version
  182  git clone git@github.com:aws-samples/amazon-ecs-cli-sample-app.git demo-app && \ \ncd demo-app && copilot init --app demo --name api --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 80 --deploy
  183  copilot app show
  184  alias clp="copilot"
  185  clip env ls
  186  clp env ls
  187  clp svc show
  188  clp svc logs
  189  rm -rf ~/demo-app
  190  mkdir SecretECS
  191  cd SecretECS
  192  rm -rf SecretECS
  193  brew install sh
  194  brew install gh
  195  gh config --help
  196  gh config set editor "code --wait"
  197  gh status
  198  npx express-generator --no-view demo-app
  199  npm install typescript ts-lint --save-dev
  200  tsc --init
  201  npm i @types/express @types/node --save-dev
  202  npm install pg --save-dev
  203  brew install --cask pgadmin4
  204  cat
  205  cat /Users/tuszym/.npm/_logs/2021-02-05T17_49_22_020Z-debug.log
  206  tsp -p ./src
  207  cat /Users/tuszym/.npm/_logs/2021-02-05T17_55_03_992Z-debug.log
  208  tsc && node dist/src/app.js
  209  node dist/src/app.js
  210  tsc -p ./src
  211  cd dist
  212  node src/dist/src/app.js
  213  tsc && node src/dist/src/app.js
  214  tsc -p src
  215  tsc -p
  216  rm -rf src/dist
  217  npm install -D typescript
  218  npm install @types/express --save-dev
  219  rm -rf dist
  220  cd .bin
  221  tslint --init
  222  ./node_modules/.bin/tslint --init
  223  npm install -D typescript@3.3.3\nnpm install -D tslint@5.12.1\n
  224  npm install -S express@4.16.4\nnpm install -D @types/express@4.16.1\n
  225  brew services start postgresql
  226  alias pg_start="launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist"\n alias pg_stop="launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist"
  227  pg_start
  228  createdb whoami
  229  createdb tuszym
  230  creatuser -s postgres
  231  createdb tododb
  232  ]psql -U postgres -l
  233  psql -U postgres -l
  234  psql -U tuszym -l
  235  npm install iconv
  236  npm install -D iconv
  237  npm build start
  238  npm install -g iconv
  239  npm install -g ts-node
  240  curl http://localhost:4000/todos
  241  curl http://localhost:4000
  242  git commit -m "first revision - non-containerized"
  243  curl https://github.com/ufoscout/docker-compose-wait/releases/download/2.2.1/wait
  244  docker-compose up --build -d
  245  docker logs
  246  vim ~/remove-all-from-docker.sh
  247  chmod +x ~/remove-all-from-docker.sh
  248  docker-compose down
  249  ~/remove-all-from-docker.sh
  250  docker-compose up --build
  251  git commit -m "containerized - working"
  252  git commit -m "update"
  253  npm i aws-cdk
  254  docker exec -it secretecs_todo-app bash
  255  docker exec -it todo-app bash
  256  \cdk
  257  mkdir project
  258  rm -rf node_modules/
  259  git checkout package-lock.json
  260  cd ../project
  261  npm i @aws-cdk/core
  262  npm i @aws-cdk/aws-ec2
  263  npm i @aws-cdk/aws-ecs
  264  npm i @aws-cdk/aws-ecs-patterns
  265  cdk bootstrap --force
  266  npm i @aws-cdk/aws-rds
  267  aws secretsmanager create-secret \ \n--name prod/service/db/user --secret-string mptsfext secretsmanager create-secret --name prod/service/db/password --secret-string myPassword
  268  aws secretsmanager create-secret --name prod/service/db/user --secret-string mptsfext secretsmanager create-secret --name prod/service/db/password --secret-string myPassword
  269  aws
  270  aws secretsmanager create-secret
  272  aws secretsmanager create-secret --name prod/service/db/user --secret-string yourAwesomeUser
  273  aws secretsmanager create-secret --name prod/service/db/password --secret-string yourAwesomePassword
  274  gh repo clone billykong/aws-cdk-fargate-rds-stack
  275  gh repo clone billykong/express-database-checker
  276  cd express-database-checker
  277  cd project
  278  lazygit "trimming the fat"
  279  vim README.md
  280  lazygit "test push"
  281  cdk init cdk-secret-ecs --language typescript
  282  mcdir ecs-cdk-sample-app
  283  npm install && npm run buiild && cdk synth
  285  echo $AWS_REGION
  286  npm install && npm run build && cdk synth
  287  aws secretsmanager create-secret --name RDSStackSecret --secret-string myPassword
  288  lazygit "add all"
  289  node mpt.js
  290  cdk deploy -f --all
  291  cd ../ecs-cdk
  292  cd ../ecs-cdk-sample-app
  293  cdk deploy --all -f
  294  cdk deploy --require-approval never --all\n
  295  cd code/ecs-cdk-sample-app
  296  cdk destroy ecs-stack
  297  cd aws-cdk-fargate-rds-stack
  298  cdk destroy VPCStack RDSStack
  299  cdk destroy VpcStack RDSStack
  300  cd code/secretecs
  301  lazygit "round 2"
  302  git reset ~1
  303  git reset d98b83c6ce7aae9073a6671420c0b286731fd154
  304  git reset 2b33eee02b2660325c878dccd6898955a00cbfe8
  305  git revert 77ef4408b727478ace32feb129d856507f3a08f0
  306  git revert 2b33eee02b2660325c878dccd6898955a00cbfe8
  307  git switch -c containerized
  308  git reset
  309  git rebase main containerized
  310  git checkout 2b33eee02b2660325c878dccd6898955a00cbfe8
  311  git switch -c container
  312  git rebase container main
  313  git commit -m "first try env vars from container"
  314  git push -f
  315  aws secretsmanager create-secret --name PostgresPassword --secret-string myPassword123
  316  aws secretsmanager create-secret --name PostgresUsername --secret-string postgres
  317  cdk synth help
  318  cdk synth -v
  319  cdk listh
  320  cdk list
  321  cdk synth\\n
  322  cdk synth\n
  323  history | grep install
  324  cdk synth RDSStack
  325  cdk deploy RDSStack\n
  326  cdk destroy RDSStack
  327  cdk deploy RDSStack ECSStack
  328  lazygit "debug container"
  329  node dist/app.js
  330  lazygit "update method"
  331  lazygit "add in migration first try"
  332  npm install pg-migrations
  333  lazygit "migrations round 2"
  334  lazygit "migrations round 2.5"
  335  npm install prisma
  336  npx prisma init
  337  npm uninstall prisma
  338  npm uninstall pg-migration
  339  npm uninstall pg-migrate
  340  npm uninstall pg-migrations
  341  lazygit "migrations round 3"
  342  curl http://ecsst-farga-kxnltdgus9oo-1829103737.us-west-2.elb.amazonaws.com/todos
  343  curl http://ecsst-farga-kxnltdgus9oo-1829103737.us-west-2.elb.amazonaws.com/migrate
  344  lazygit "update debugging"
  345  lazygit "update env vars from SM"
  346  curl ECSSt-Farga-BHA5R0VBFZDF-1304961256.us-west-2.elb.amazonaws.com
  347  lazygit "should fix migrations into two separate statements"
  348  curl ECSSt-Farga-BHA5R0VBFZDF-1304961256.us-west-2.elb.amazonaws.com/todos
  349  curl ECSSt-Farga-BHA5R0VBFZDF-1304961256.us-west-2.elb.amazonaws.com/migrate
  350  gh auth login
  351  git checkout -b main
  352  cd ecs-cdk-sample-app
  353  git commit -am "first commit - working vpc, rds, ecs fargate stack - minimal web app"
  354  cp ../secretecs/.gitignore .
  355  git commit -am "added gitignore"
  356  rm -rf ecs-cdk-sample-app
  357  lazygit "added additional gitignore"
  358  lazygit "cleanup and trimming"
  359  curl ECSSt-Farga-18PGIZ5YVXWGE-2083280440.us-west-2.elb.amazonaws.com/migrate
  360  curl ECSSt-Farga-18PGIZ5YVXWGE-2083280440.us-west-2.elb.amazonaws.com/todos
  361  lazygit "added README"
  362  lazygit "amended README"
  363  git checkout -b feature/fargate-cdk
  364  git checkout -b feature/ecsec2-cdk
  365  git push origin
  366  lazygit
  367  lazygit "ec2 start"
  368  cdk bootstrap help
  369  lazygit "added ec2 ecs stack"
  370  curl http://ECSEC-demoa-ZUE2V6RF9ATF-1698934003.us-west-2.elb.amazonaws.com/migrate
  371  curl http://ECSEC-demoa-ZUE2V6RF9ATF-1698934003.us-west-2.elb.amazonaws.com/todos
  372  lazygit "amended"
  373  git checkout -b ecsec2-ssm-cdk
  374  git push origin ecsec2-ssm-cdk
  375  lazygit "initial commit"
  376  git checkout ecsec2-ssm-cdk
  377  git branch -m feature/ecsec2-ssm-cdk
  378  git push origin feature/ecsec2-ssm-cdk
  379  git push origin --delete ecsec2-ssm-cdk
  380  git checkout -b feature/ssm-fargate-rds
  381  aws ssm put-parameter \\n--name "PostgresDbPassword" \\n--value "
  382  aws ssm put-parameter --name "PostgresDbPassword" --value "mySecurePassword123" --type "SecureString"
  383  cdk deploy ECSStack --require-apporoval never
  384  curl ECSSt-Farga-1DXRXRQ8FY5P0-2142995785.us-west-2.elb.amazonaws.com/migrate
  385  curl ECSSt-Farga-1DXRXRQ8FY5P0-2142995785.us-west-2.elb.amazonaws.com/todos
  386  lazygit "working SSM w/ fargate service"
  387  git checkout -b feature/actual-ui
  388  git commit -am "removal of old app - leaving docker skeleton"
  389  npm i -g yarn
  390  yarn create react-app todo-list --template typescript
  391  cd todo-list
  392  rm App.css App.test.tsx index.css logo.svg setupTests.ts
  393  rm reportWebVitals.ts
  394  rm -rf todo-list
  395  npm install express sequelize pg pg-hstore body-parser cors --save
  396  npm run setup-db
  397  lazygit "add ds_store to gitignore"
  398  git push origin feature/actual-ui
  399  nopm install express pg cors
  400  npm install express pg cors
  401  npm install typescript ts-node
  402  npm install "@types/node"
  403  npm i --save
  404  npm i --save-dev @types/express
  405  node server
  406  npm start\n: 1613153502:0;npm start
  407  npm install -g typescript
  408  tsc --version
  409  npm install nodemon @types/node
  410  npm run dev:debug
  411  npm install cors
  412  npm i --save-dev @types/cors
  413  npm install ts-node --save
  414  npm install ts-dotenv
  415  npm remove ts-dotenv
  416  brew install postman
  417  npx create-react-app client
  418  rm -rf client
  419  npx create-react-app client --template typescript
  420  cd clients
  421  rm -rf ./components
  422  mcdir components
  423  touch ListTodos.ts
  424  touch InputTodo.ts
  425  touch EditTodo.ts
  426  cd client
  427  brew install spectacle
  428  brew reinstall spectacle
  429  git checkout -b feature/workingtodolist
  430  git commit -m "First working UI for todo - dev version"
  431  lazygit "added working ui - cleaned up - ready for docker"
  432  git push origin feature/workingtodolist
  433  yarn update immer
  434  yarn help
  435  yarn upgrade immer
  436  yarn why immer
  437  yarn outdated immer
  438  yarn update immer --latest
  439  yarn upgrade immer --latestt
  440  yarn upgrade react-scripts --latest
  441  lazygit "use yarn"
  442  yarn build
  443  lazygit "with yarn built"
  444  lazygit "working"
  445  git pussh origin feature/ssm-fargate-rds
  446  lazygit "add static route"
  447  lazygit "mod package json"
  448  git reset src/server.ts
  449  lazygit "fix up db connection"
  450  lazygit "fix bug"
  451  git reset rds-stack.ts
  452  git reset HEAD rds-stack.ts
  453  cd ../secretsecs
  454  ep[
  455  git checkout -b feature/restructure
  456  create-react-app secret-ecs
  457  create-react-app secret-ecs --use-npm
  458  cd secret-ecs
  459  npm install pg --save
  460  node src/server.ts
  461  tsc src/server.ts
  462  tsc server.ts
  463  node server.js &
  464  ps -ef | grep node
  465  ps -a | gre[ node
  466  ps -a | grep node
  467  npm install ts-node-dev -s
  468  cd server && ts-node-dev --respawn --transpileOnly ./server.ts
  469  npm install ts-node-dev
  470  ts-node-dev
  471  npm install npm-run-all
  472  lsof -i :3000
  473  kill -9 1882
  474  kill -9 25621
  475  cd server
  476  npm install -g ts-node-dev
  477  node ts-node-dev ./server.ts --respawn --transpileOnly && wait-on tcp:4000
  478  ts-node-dev ./server.ts --respawn --transpileOnly && wait-on tcp:4000
  479  curl ECSSt-Farga-1OU002MV2OK4O-904972957.us-west-2.elb.amazonaws.com/migrate
  480  rm -rf secret-ecs
  481  gh clone mptaws/secretecs
  482  curl localhost:4000/migrate
  483  curl http://ecsst-farga-1ou002mv2ok4o-904972957.us-west-2.elb.amazonaws.com/
  484  git help
  485  git checkout HEAD
  486  git revert --HEAD hard
  487  git reset add878e875146f4e505da259814668bef79c7858
  488  git checkout add878e875146f4e505da259814668bef79c7858
  489  git reset add878e875146f4e505da259814668bef79c7858 --hard
  490  git checkout -b "fixer"
  491  git commit -am "fixer"
  492  git push origin fixer
  493  git fetch origin
  494  git checkout -b fixer origin/fixer
  495  git merge --no-ff fixer
  496  git push origin main --force
  497  cd code/secret-ecs-cdk-example
  498  lazygit "modded"
  499  lazygit "forgot package"
  500  lazygit "debug code"
  501  lazygit "debugging more"
  502  cat .zshrc
  503  cd ~/coede
  504  lazygit "simplify - regular js"
  505  cd ../bck
  506  history | grep create-react-app
  507  create-react-app clientv2 --use-npm
  508  cd clientv2
  509  npm eject
  510  lazygit "lotsa debugging"
  511  curl http://ecsst-farga-1ou002mv2ok4o-904972957.us-west-2.elb.amazonaws.com/todos
  512  curl http://localhost:4000/migrate
  513  curl http://ecsst-farga-1ou002mv2ok4o-904972957.us-west-2.elb.amazonaws.com/migrate
  514  lazygit "fix migrate"
  515  npm install cors --save
  516  npm install express
  517  lazygit "first rev - working ui and api"
  518  lazygit "update dockerfile"
  519  lazygit "update dockerfile again"
  520  lazygit "remove empty root route"
  521  lazygit "different cors config"
  522  lazygit "add http proxy"
  523  lazygit "working w/o env"
  524  npm run start
  525  cdk deploy ECSStack --require-approval-never
  526  curl http://ecsst-farga-1qmcgmb6xzqvr-1100610965.us-west-2.elb.amazonaws.com/migrate
  527  lazygit "fix migration"
  528  lazygit "fixes"
  529  cdk destroy --all --require-approval never
  530  git rebase HEAD ~30
  531  git rebase HEAD ~20
  532  git rebase HEAD ~10
  533  git rebase -i HEAD~20
  534  =git rebase --abort
  535  git rebase -i HEAD~30
  536  git rebase -i HEAD~9
  537  git commit -m "cleanup readme"
  538  lazygit "remove vscode"
  539  lazygit "remove buildfiles"
  540  git config --global user.name "Michael Tuszynski"
  541  git config --global user.email "tuszym@amazon.com"
  542  git log
  543  git rebase --abort
  544  git rebase -i -p 49147aff7f363c263295399b240097238799f3d5
  545  brew install macdown
  546  cat ~/zshrc
  547  cat ~/.zshrc
  548  c9me ecsdemo
  549  git commit -m "remove fargate"
  550  npm install @types/console
  551  cdk context
  552  chmod +x ./cdk-deploy-to.sh
  553  history _ grep cdk-
  554  history | grep cdk-
  555  git push origin feature/ecsec2-cdk
  556  mkdir compare
  557  cd compare
  558  git checkout feature/ecsec2-ssm-cdk
  559  git checkout feature/fargate-cdk
  560  npm install @aws-cdk/core @aws-cdk/aws-ec2 @aws-cdk/aws-rds @aws-cdk/aws-ecs @aws-cdk/aws-ecs-patterns @aws-cdk/aws-secretsmanager axios
  561  npm remove axios
  562  git commmit -am "cleanup"
  563  git push origin feature/fargate-cdk
  564  git branch -d feature/ecsec2-ssm-cdk
  565  git branch -D feature/ecsec2-ssm-cdk
  566  git push origin --delete feature/ecsec2-ssm-cdk
  567  git checkout feature/ssm-fargate-rds
  568  history | grep secretsmanager
  569  history | grep DBPass
  570  git commit -m "cleanup"
  571  git push origin feature/ssm-fargate-rds
  572  cd ~/compare
  573  history | grep repo
  574  npm install @aws-cdk/core @aws-cdk/aws-ec2 @aws-cdk/aws-rds @aws-cdk/aws-ecs @aws-cdk/aws-ecs-patterns @aws-cdk/aws-secretsmanager @aws-cdk/aws-ssm
  575  npm remove @aws-cdk/aws-iam
  576  npm remove -g @aws-cdk/aws-iam
  577  npm install aws-cdk
  578  mkdir demo-project
  579  cd demo-project
  580  lazygit "updated project structure and docs"
  581  brew install typora
  582  git pull origin main
  583  lazygit "first rev of secrets - single page needing screenshots"
  584  mkdir cdk-sample-app && cd cdk-sample-app
  585  rm -rf cdk-sample-app
  586  cd ~/compare/secret-ecs-cdk-example
  587  cat ~/code/secret-ecs-cdk-example/cdk-deploy-to.sh
  588  chmod +x cdk-deploy-to.sh
  589  ./cdk-deploy-to.sh 588795091775 us-west-2
  590  cdk destroy VPCStack
  591  lazygit "updates"
  592  git pull -f
  593  git commit
  594  brew install psequel
  595  brew remove pgadmin4
  596  lazygit "broken out into sep pages - secrets manager section only"
  597  lazygit "revert package json change"
  598  cp ~/Downloads/ecsworkshop-kp.pem .
  599  chmod 400 ecsworkshop-kp.pem
  600  aws ssm put-parameter --name "DBPass" --value "mySecurePassword123456" --type "SecureString"
  601  lazygit "ssm parameter section"
  602  aws ecr create-repository --repository ecr-repo --region us-west-2
  603  history | grep ssh
  604  git pussh origin feature/ssm-fargate-rds\n 792 ssh -i ~/ecsworkshop-kp.pem ec2-user@ec2-35-165-247-239.us-west-2.compute.amazonaws.com
  605  ssh -i ~/ecsworkshop-kp.pem ec2-user@ec2-35-165-247-239.us-west-2.compute.amazonaws.com
  606  caffeinate --help
  607  caffeinate --h
  608  caffeinate -h
  609  cd ~code/
  610  git commit -m "updated diagrams"
  611  aws s3 ls s3://amplify-amplify-notetaker-dev-70825-deployment --force
  612  aws s3 rb s3://amplify-amplify-notetaker-dev-70825-deployment --force
  613  aws s3 rb s3://amplify-nexttsappsync-dev-90626-deployment --force
  614  aws s3 rb s3://amplify-qbert30poc-dev-110750-deployment --force
  615  aws s3 rb s3://amplify-sahelper-test-91213-deployment --force
  616  aws s3 rb s3://aws-athena-query-results-588795091775-us-west-2 --force
  617  aws s3 rb s3://cdk-hnb659fds-assets-588795091775-us-west-2 --force
  618  aws s3 rb s3://cdktoolkit-stagingbucket-14m9n1gbys2eg --force
  619  aws s3 rb s3://cdktoolkit-stagingbucket-1d8v79c8thsqj --force
  620  aws s3 rb s3://cdkworkshoppipelinestack-pipelineartifactsbucketa-17pp39juvrc8e --force
  621  aws s3 rb s3://cloudtrail-awslogs-588795091775-njy06kfa-isengard-do-not-delete --force
  622  aws s3 rb s3://mpt-aws-demo-cognito-site --force
  623  rm -rf .DS_Store
  624  aws ecr ls
  625  aws ecr
  626  cdk destroy RDSStack VPCSTack -f
  627  git checkout lib/eds-stack-sm.ts
  628  git checkout lib/rds-stack-sm.ts
  629  cdk deploy VPCStack RDSStack --require-approval never
  630  curl http://ECSSt-Farga-RMGB2TJUOO2U-67468157.us-west-2.elb.amazonaws.com/migrate
  631  cdk deploy --all -require-approal never
  632  lazygit "added aurora serverless"
  633  curl ECSSt-Farga-1DIDZ7G1CEHLY-709693700.us-west-2.elb.amazonaws.com/migrate
  634  open ECSSt-Farga-1DIDZ7G1CEHLY-709693700.us-west-2.elb.amazonaws.com
  635  open http://ECSSt-Farga-1DIDZ7G1CEHLY-709693700.us-west-2.elb.amazonaws.com
  636  curl http://ECSSt-Farga-H62JYLMLBNPZ-2078918929.us-west-2.elb.amazonaws.com/migrate
  637  cdk deploy --require-approval never --all
  638  curl ECSSt-Farga-XCHMC8T93475-158651230.us-west-2.elb.amazonaws.com/migrate
  639  cdk deploy RDSStack
  640  cd secrets
  641  lazygit "update to serverless db"
  642  lazygit "update to serverless db 2"
  643  lazygit "cleanup round 2"
  644  mkdir copilot-test
  645  cd copilot-test
  646  git clone git@github.com:aws-samples/amazon-ecs-cli-sample-app.git demo-app && cd demo app
  647  lazygit "cred rotation test"
  648  lazygit "cred rotation test 2"
  649  history | grep never
  650  aws ecs list-clusters
  651  aws ecs update-service
  652  aws secretsmanager rotate-secret DBCreds29A3188D-bWap2aO2fwD9
  653  aws ecs update-service --cluster ECSStack-ClusterEB0386A7-7Xkw90Z9mK13 --service ECSStack-FargateServiceECC8084D-mqhNI5Gl7ZEN
  654  aws ecs update-service --cluster ECSStack-ClusterEB0386A7-7Xkw90Z9mK13 --service ECSStack-FargateServiceECC8084D-mqhNI5Gl7ZEN --force-new-deployment
  655  aws secretsmanager rotate-secret --secret-id DBCreds29A3188D-bWap2aO2fwD9
  656  aws ecs update-service --cluster ECSStack-ClusterEB0386A7-7Xkw90Z9mK13 --service ECSStack-FargateServiceECC8084D-mqhNI5Gl7ZEN --force-new-deployment --desired-count 1
  657  lazygit "updated secrets rotation"
  658  lazygit "added creds rotation placeholder, modded menu desc"
  659  aws secretsmanager rotate-secret --secret-id serverless-credentials
  660  aws secretsmanager get-secret-value --secret-id serverless-credentials
  661  apt-get install jq
  662  sudo yum install jq
  663  brew install jq
  664  aws secretsmanager get-secret-value --secret-id serverless-credentials | jq
  665  aws secretsmanager get-secret-value --secret-id serverless-credentials --query SecretString
  666  aws secretsmanager get-secret-value --secret-id serverless-credentials --query SecretString | jq
  667  aws secretsmanager get-secret-value --secret-id serverless-credentials --query SecretString | jq | jq
  668  aws secretsmanager rotate-secret --secret-id serverless-credentials | jq
  669  aws secretsmanager get-secret-value --secret-id serverless-credentials --query SecretString --output text | jq
  670  aws ecs update-service --cluster FargateClusterDemo --service FargateServiceDemo --desired-count 1 --force-new-deployment
  671  lazygit "added names to cluster
  672  lazygit "added names to cluster"
  673  lazygit "Added Credential Rotation, cleanup syntax highlights and image size"
  674  cd ~/Downloads/aws-copilot-sample-service-master
  675  lazygit "added copilot manifest"
  676  brew install licecap
  677  brew remove postgres
  678  ps -ef | grep postgres
  679  rm -rf postgresdata
  680  npm install --loglevel=error
  681  brew install postgres
  682  psql
  683  \c tododb
  684  rm -rf docker-compose.yml
  685  docker build - < Dockerfile
  686  ps -ef | grep docker
  687  docker run 12e0ab49c3c2
  688  docker exec -it 0e80d5eb1e6d3f2b8cc7e37f2d50df5e188e43dc5e6d6ad77a01fbc5c1d37f58 /bin/sh; exit
  689  docker inpsect trusting_pike
  690  docker run 12e0ab49c3c2 -p 4000:4000
  691  docker run -p
  692  docker run -p 4000
  693  docker run -p 4000 12e0ab49c3c2
  694  create-react-app testbed
  695  npm uninstall -g create-react-app
  696  yarn global remove create-react-app
  697  create-react-app
  698  npx create-react-app testbed
  699  cd testbed
  700  code -r
  701  git checkout package.json
  702  lazygit "add env output"
  703  node index.js
  704  react-scripts start
  705  git checkout public/index.html
  706  npm i react-draggable
  707  npx react-scripts start
  708  git checkout components/ListTodos.js
  709  git checkout src/components/ListTodos.js
  710  lazygit "add env debug"
  711  npm i lodash
  712  ;s
  713  ld
  714  cd todo-app
  715  cat addons/db.yml
  716  pbcopy < addons/db.yml
  717  rm cdk-deploy-to.sh
  718  lazygit "final rev - all modules complete"
  719  lazygit "trim unused code paths"
  720  lazygit "updated filenames"
  721  aws ecr create-repository --repository-name secret-ecs-repo --region us-west-2
  722  lazygit "update ecr action"
  723  aws ecr describe-repositories --region us-west-2
  724  aws ecr describe-repositories --region us-west-2 | jq
  725  lazygit "update ecr"
  726  lazygit "change to ecr repo"
  727  lazygit "removed env var"
  728  lazygit "minor updates"
  729  lazygit "remove action"
  730  git abort
  731  git merge abort
  732  git clone git@github.com/mptaws/secretecs
  733  git clone https://github.com/mptaws/secretecs
  734  rm -rf .github
  735  lazygit "removed actions"
  736  rm -rf public
  737  rm -rf testbed
  738  efaults write com.apple.desktopservices DSDontWriteNetworkStores true
  739  defaults write com.apple.desktopservices DSDontWriteNetworkStores true
  740  git checkout -b feature/add-tests
  741  npm install --save-dev jest @types/jest @aws-cdk/assert
  742  npx jest
  743  npm upgrade -g aws-cdk
  744  npm remoeve -g aws-cdk
  745  cdk init --language=typescript lib
  746  npx test
  747  tsc --build --clean
  748  npm clean
  749  git checkout cdk.json
  750  git clone https://github.com/adamjkeller/ecs-codepipeline-demo
  751  cd ecs-codepipeline-demo
  752  curl http://ECSSt-Farga-27Z78OQIZZOL-345922814.us-west-2.elb.amazonaws.com/migrate
  753  curl http://ECSSt-Farga-KO8LVK49PP1M-1655991801.us-west-2.elb.amazonaws.com/migrate
  754  npm test -- -u
  755  npm test
  756  cd ~/sandbox
  757  rm -rf sandbox
  758  mkdir sandbox
  759  cd sandbox
  760  history | grep cdk init
  761  cdk init --language=typescript
  762  cat cdk.json
  763  git commit -m "added tests and refactor cleaner code"
  764  brew install terraform
  765  sudo brew cleanup
  766  terraform --help
  767  terraform -install-autocomplete
  768  mkdir terraform-docker-demo && cd $_
  769  terraform apply
  770  rm -rf terraform-docker-demo
  771  mkdir terraform-aws
  772  cd terraform-aws
  773  terraform providers
  774  terraform providers -h
  775  terrraform state rm provider[registry.terraform.io/hashicorp/docker]
  776  terraform state rm provider[registry.terraform.io/hashicorp/docker]
  777  terraform providers rm provider[registry.terraform.io/hashicorp/docker]
  778  terraform plan
  779  terraform destroy
  780  terraform init
  781  git commit -m "read for merge"
  782  git push origin feature/add-tests
  783  lazygit "minor revisions pt 2"
  784  history | grep upstream
  785  git checkout -b issue/fix-copilot
  786  mkcdir cptest
  787  mkdir cptest && cd $_
  788  rm -rf cptest
  789  mkdir cdk-api-pipeline && cd $_
  790  cdk init --language="typescript"
  791  mkdir lambda && cd $-
  792  mkdir lambda && cd $_
  793  cd lambda
  794  git clone git@github.com:evayde/cdk-lambda-api-fastify.git .
  795  rm -rf .git
  796  rm -rf .cdk
  797  npm i -S @aws-cdk/aws-lambda @aws-cdk/aws-apigateway @aws-cdk/aws-cloudfront @aws-cdk/aws-codedeploy
  798  npm i -S @aws-cdk/codebuild
  799  npm i -S @aws-cdk/aws-codebuild @aws-cdk/aws-codepipeline @aws-cdk/aws-codepipeline-actions
  800  mv lambda cdk-api-pipeline
  801  npm i -D cross-env
  802  git branch -M main
  803  git remote add origin https://github.com/mptaws/cdk-api-pipeline.git
  804  lazygit "commit"
  805  npx cross-env GITHUB_TOKEN=a3754c2f8c987104cf56ee167454eb9adbf5e79c cdk deploy PipelineStack
  806  cat ~/.ssh
  807  rm id_codecommit
  808  rm id_codecommit.pub
  809  cd ~/.ssh/
  810  ssh-keygen -t ed25519 -C "tuszym+cc@amazon.com"
  811  pbcopy < id_codecommit.pub
  812  vi ~/.ssh/config
  813  pbcopy < ~/.ssh/id_ed25519.pub
  814  ssh-keygen
  815  pbcopy < ~/.ssh/id_cc.pub
  816  subl ~/.ssh/config
  817  atom ~/.ssh/config
  818  chmod 600 ~/.ssh/config
  819  ssh git-codecommit.us-east-2.amazonaws.com
  820  aws codecommit create-repository --repository-name CDKDemo --repository-description "cdk repo test"
  821  aws codecommit create-repository --repository-name pipeline --repository-description "pipeline  test" | jq
  822  git clone ssh://git-codecommit.us-west-2.amazonaws.com/v1/repos/pipeline pipeline
  823  cd pipeline/
  824  npm install -S @aws-cdk/aws-codedeploy @aws-cdk/aws-lambda @aws-cdk/aws-codebuild @aws-cdk/aws-codepipeline\nnpm install -S @aws-cdk/aws-codecommit @aws-cdk/aws-codepipeline-actions
  825  mkdir lambda
  826  lazygit "add lambda function"
  827  git commit -m "add lambda"
  828  git all --all
  829  git add --all
  830  git commit -m "add CDK app"
  831  cdk deploy PipelineDeployingLambdaStack --require-approval never
  832  git commit -m "test hhh"
  833  export $ACCOUNT_ID
  834  npx cdk bootstrap --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess aws://445164711350/us-west-2
  835  mkdir my-pipeline
  836  cd my-pipeline
  837  echo "# pipeline-test" >> README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\ngit branch -M main\ngit remote add origin https://github.com/mptaws/pipeline-test.git\ngit push -u origin main
  838  git checkout content/secrets/04-walkthrough-step-01/copilot.md
  839  git checkotu README>md
  840  git checkotu README.md
  841  git checkout README.md
  842  adf
  843  df
  844  git checkout -b feature/copilot-revisions
  845  git commit -m "updates to copilot prereqs"
  846  cd ~/secretecs
  847  git commit -m "fixed credential rotation"
  848  aws secretsmanager
  850  aws secretmanager list-secrets
  851  aws secretmanagers list-secrets
  852  aws secretsmanager list-secrets
  853  aws secretsmanager list-secrets | jq -r name
  854  jq hep
  855  jq help
  856  jq --help
  857  aws secretsmanager list-secrets | jq name
  858  aws secretsmanager list-secrets | jq
  859  aws secretsmanager list-secrets | jq SecretList.name
  860  aws secretsmanager list-secrets | jq SecretList.Name
  861  aws secretsmanager list-secrets | jq SecretList[].Name
  862  aws secretsmanager list-secrets | jq .SecretList[].Name
  863  aws secretsmanager list-secrets | jq .SecretList.Name
  864  aws secretsmanager list-secrets | jq .SecretList[0].Name
  865  aws secretsmanager list-secrets | jq .SecretList[0]
  866  aws secretsmanager list-secrets | jq .SecretList.[]
  867  aws secretsmanager list-secrets | jq .SecretList.[0]
  868  aws secretsmanager list-secrets | jq '.[0]'
  869  aws secretsmanager list-secrets | jq .SecretValue | {name}
  870  aws secretsmanager list-secrets | jq .SecretValue | jq {name}
  871  aws secretsmanager list-secrets | jq .SecretValue | jq {Name}
  872  aws secretsmanager list-secrets | jq .SecretValue
  873  aws secretsmanager list-secrets | jq .SecretList | jq {name}
  874  aws secretsmanager list-secrets | jq .SecretList | jq {Name}
  875  aws secretsmanager list-secrets | jq .SecretList | jq Name
  876  aws secretsmanager list-secrets | jq .SecretList | jq .Name
  877  aws secretsmanager list-secrets | jq .SecretList | jq .[0].Name
  878  aws secretsmanager list-secrets | jq .SecretList | Name
  879  aws secretsmanager list-secrets | jq '[.[] | {name}
  880  aws secretsmanager list-secrets | jq '[.[] | {name}'
  881  aws secretsmanager list-secrets | jq '.[] | {SecretList: Name}\n'
  882  aws secretsmanager list-secrets | jq '.[]'\n'
  883  aws secretsmanager list-secrets | jq .[]\n'
  884  aws secretsmanager list-secrets | jq .[]
  885  aws secretsmanager list-secrets | jq .SecretList[]
  886  aws secretsmanager list-secrets | jq '.SecretList.[0] | {Name}'
  887  aws secretsmanager list-secrets | jq '.SecretList.[0]'
  888  aws secretsmanager list-secrets | jq .SecretList
  889  aws secretsmanager list-secrets | jq '.SecretList'
  890  aws secretsmanager list-secrets | jq '.SecretList[0]''\n'
  891  aws secretsmanager list-secrets | jq '.SecretList[0]'\n'\n'
  892  secret_id=aws secretsmanager list-secrets | jq '.SecretList[0].Name'
  893  aws secrets-manager get-secret-value $secret_id --query SecretString --output text | jq
  894  $secret_id
  895  history | grep url
  896  secret_id=$(aws secretsmanager list-secrets | jq '.SecretList[0].Name')
  897  aws secretsmanager get-secret-value $secret_id --query SecretString --output text | jq
  898  aws secretsmanager get-secret-value --secret-id $secret_id --query SecretString --output text | jq
  899  aws secretsmanager list-secrets | jq '.SecretList[0].Name'
  900  aws secretsmanager list-secrets | jq '.SecretList[0]'
  901  aws secretsmanager rotate-secret
  902  aws secretsmanager rotate-secret --secret-id
  903  secret_id=$(aws secretsmanager list-secrets | jq -r '.SecretList[0].ARN')
  904  aws secretsmanager rotate-secret --secret-id $secret_id
  905  secret_id=$(aws secretsmanager list-secrets | jq -r '.SecretList[0].Name')
  906  echo $secret_id
  907  touch ~/Desktop/test.yml
  908  aws cloudformation validate-template --template-body file:///Users/tuszym/Desktop/test.yml
  909  aws cloudformation validate-template --template-body file:///Users/tuszym/Desktop/test.yml | jq
  910  caffeinate
  911  laZygit "updated db yml with vpc endcpoint and rotation enabled and working"
  912  lazygit "updated db yml with vpc endcpoint and rotation enabled and working"
  913  lazygit "working copilot secrets rotation"
  914  git commit -am "added secret attachment to rotation and excluded copilot workspace file"
  915  cd components
  916  find . -name ".DS_Store"
  917  brew install cfn-lint
  918  cat lib/rds-stack.ts
  919  lazygit "move dependency to rotation instead of template"
  920  cat copilot/todo-app/addons/db.yml
  921  lazygit "rename credential rotation to match copilot"
  922  cfn-lint ~/Desktop/cluster.yml
  923  OA
  924  git commit -am "first revision - copilot cred rotation working, condense chapters"
  925  git push origin feature/copilot-revisions
  926  cd ../secret-ecs
  927  lazygit "minor rev"
  928  lazygit "bugfix"
  929  git checkout -b feature/final
  930  git commit -am "cleanup"
  931  git push origin feature/final
  932  git commit -am "restore cfn output"
  933  cfn-lint ~/Documents/cluster.yml
  934  git commit -am "add remove snapshot"
  935  cd ~code
  936  MY_VAR="test123"
  937  yarn start
  938  mkdir express
  939  cd code/test
  940  cd ~/code/test
  941  cd express
  942  npm remove lodash
  943  lazygit "add env endpoint, remove lodash"
  944  rm -rf /usr/local/Cellar/python@3.9/3.9.1_6
  945  sudo rm -rf /usr/local/Cellar/python@3.9/3.9.1_6
  946  sudo rm -rf /usr/local/Cellar/python@3.9/3.9.1_7
  947  nvm use 14.15.4
  948  nvm default 14.15.4
  949  cd /Users/tuszym/.nvm/versions/node/v14.15.4/lib/node_modules
  950  cd aws-cdk
  951  cd cdk
  952  pwd
  953  nvm help
  954  brew upgrade aws-cdk
  955  chmod +x /Users/tuszym/.nvm/versions/node/v14.15.4/lib/node_modules/aws-cdk/bin/cdk'\n
  956  chmod +rwx /Users/tuszym/.nvm/versions/node/v14.15.4/lib/node_modules/aws-cdk/bin/cdk\n
  957  sudo npm install -g aws-cdk
  958  cd /Users/tuszym/.nvm/versions/node/v14.15.4/lib/node_modules/aws-cdk/bin/
  959  nvm reinstall node
  960  nvm install --lts
  961  nvm alias default 14.16.0
  962  nvm ls
  963  nvm uninstall v14.15.4
  964  pbcopy <
  965  ssh-keygen -t ed25519
  966  pbcopy < ~/.ssh/id_c9_ed25519
  967  pbcopy < ~/.ssh/id_c9_ed25519.pub
  968  tmux a
  969  brew install tmux
  970  tmux a cloud9-env1
  971  cd ~/code/secretecs/
  972  cd ~/code/express
  973  POSTGRES_DATA="{\"dbClusterIdentifier\": \"ecsdemo123-test-todo-app-addonsst-auroradbcluster-mhtsnbvqh457\", \"password\": \"rEM=\\\"r\\\\P{U1M'mc)~Z$1Juj&qT0a1Jm$\", \"dbname\": \"tododb\", \"engine\": \"postgres\", \"port\": 5432, \"host\": \"ecsdemo123-test-todo-app-addonsst-auroradbcluster-mhtsnbvqh457.cluster-crjfptizfvxh.us-west-2.rds.amazonaws.com\", \"username\": \"postgres\"}"
  974  echo $POSTGRES_DATA
  975  sudo xcode-select --reset
  976  npm install nodemon
  977  xcode-select --print-path
  978  sudo rm -rf $(xcode-select --print-path)\n
  979  cfn-lint copilot/todo-app/manifest.yml
  980  git commit -am "move secrets to not show up in task definition copilot"
  981  history | grep ecr0repo
  982  history | grep ecr-repo
  983  history | grep secretecs
  984  history | grep docker push public.ecr.aws
  985  history | grep docker public.ecs.aws
  986  history | grep public.ecs.aws
  987  ws ecr-public get-login-password --region us-west-2 | docker login --username AWS --password-stdin public.ecr.aws
  988  history | grep ecr-public
  989  echo $TOKEN
  990  docker tag 60e4f4bc4c9d public.ecr.aws/mptaws/secret-ecs-repo
  991  git commit -am "change secrets management"
  992  git history
  993  git commit -am "revision to secrets handling"
  994  git commit -am "updated diagram, spelling fixes"
  995  git commit -am "env var update"
  996  git commit -am "added copilot cleanup output"
  997  git commit -am "edit cdk outputs for easier tutorial flow"
  998  git commit -am "add cloudformation output"
  999  git commit -am "fix filename"
 1000  git commit -am "updated lambda subnet"
 1001  git checkout lib/rds-stack.ts
 1002  git commit -am "remove secrets block - unneeded"
 1003  cd ../secret
 1004  POSTGRES_DATA="{ 'repeat(5, 10)': { _id: '{{objectId()}}', index: '{{index()}}', guid: '{{guid()}}', isActive: '{{bool()}}', balance: '{{floating(1000, 4000, 2, "$0,0.00")}}', picture: 'http://placehold.it/32x32', age: '{{integer(20, 40)}}', eyeColor: '{{random("blue", "brown", "green")}}', name: { first: '{{firstName()}}', last: '{{surname()}}' }, company: '{{company().toUpperCase()}}', email(tags) { return `${this.name.first}.${this.name.last}@${this.company}${tags.domainZone()}`.toLowerCase(); }, phone: '+1 {{phone()}}', address: '{{integer(100, 999)}} {{street()}}, {{city()}}, {{state()}}, {{integer(100, 10000)}}', about: '{{lorem(1, "paragraphs")}}', registered: '{{moment(this.date(new Date(2014, 0, 1), new Date())).format("LLLL")}}', latitude: '{{floating(-90.000001, 90)}}', longitude: '{{floating(-180.000001, 180)}}', tags: [ { 'repeat(5)': '{{lorem(1, "words")}}' } ], range: range(10), friends: [ { 'repeat(3)': { id: '{{index()}}', name: '{{firstName()}} {{surname()}}' } } ], greeting(tags) { return `Hello, ${this.name.first}! You have ${tags.integer(5, 10)} unread messages.`; }, favoriteFruit(tags) { const fruits = ['apple', 'banana', 'strawberry']; return fruits[tags.integer(0, fruits.length - 1)]; } } } "
 1005  POSTGRES_DATA='{ 'repeat(5, 10)': { _id: '{{objectId()}}', index: '{{index()}}', guid: '{{guid()}}', isActive: '{{bool()}}', balance: '{{floating(1000, 4000, 2, "$0,0.00")}}', picture: 'http://placehold.it/32x32', age: '{{integer(20, 40)}}', eyeColor: '{{random("blue", "brown", "green")}}', name: { first: '{{firstName()}}', last: '{{surname()}}' }, company: '{{company().toUpperCase()}}', email(tags) { return `${this.name.first}.${this.name.last}@${this.company}${tags.domainZone()}`.toLowerCase(); }, phone: '+1 {{phone()}}', address: '{{integer(100, 999)}} {{street()}}, {{city()}}, {{state()}}, {{integer(100, 10000)}}', about: '{{lorem(1, "paragraphs")}}', registered: '{{moment(this.date(new Date(2014, 0, 1), new Date())).format("LLLL")}}', latitude: '{{floating(-90.000001, 90)}}', longitude: '{{floating(-180.000001, 180)}}', tags: [ { 'repeat(5)': '{{lorem(1, "words")}}' } ], range: range(10), friends: [ { 'repeat(3)': { id: '{{index()}}', name: '{{firstName()}} {{surname()}}' } } ], greeting(tags) { return `Hello, ${this.name.first}! You have ${tags.integer(5, 10)} unread messages.`; }, favoriteFruit(tags) { const fruits = ['apple', 'banana', 'strawberry']; return fruits[tags.integer(0, fruits.length - 1)]; } } } '
 1006  POSTGRES_DATA='{"books":{"book":[{"title":"CPP","author":"Milton","year":"2008","price":"456.00"},{"title":"JAVA","author":"Gilson","year":"2002","price":"456.00"}]}}'
 1007  echo $POSTGRES_DATA | jq
 1008  npm install nodemon --save-dev
 1009  nodemon server.js
 1010  npx build
 1011  npx nodemon server.js
 1012  node server.js
 1013  TEST_ME=alskdfjlsdkj
 1014  echo $TEST_ME
 1015  TEST_ME npm run build && npm start
 1016  TEST_ME=asldkfjalsdkjf && npm run build && npm start
 1017  npm run build && npm start
 1018  npm run build && npm start\n: 1615738005:0;npm run build && npm start\\n
 1019  npm install ejs
 1020  DEMO_VAR="MY TEST DSLFlksDJf"
 1021  npm install dotenv
 1022  npm install dotenv --save
 1023  npm remove dotenv
 1024  npm remove ejs
 1025  echo $DEMO_AR
 1026  echo $DEMO_VAR
 1027  DEMO_VAR=sdjkflskjdf npm run build && npm start\n
 1028  npm_execpathnpm_execpath
 1029  npm run build && npm start\n
 1030  gti commit -am "adding in parameter demo test"
 1031  git commit -am "adding in parameter demo test"
 1032  history | grep docker build
 1033  docker build .
 1034  docer tag 6495216353f2 public.ecr.aws/mptaws/secret-ecs-repo
 1035  docker tag 6495216353f2 public.ecr.aws/mptaws/secret-ecs-repo
 1036  awc ecr login
 1037  TOKEN=$(aws ecr-public get-authorization-token --region us-east-1 --output=text --query 'authorizationData.authorizationToken')
 1038  history | grep token
 1039  history | grep TOKEN
 1040  aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --\npassword-stdin public.ecr.aws
 1041  aws ecr-public get-login-password --region us-west-2 | docker login --username AWS --password-stdin public.ecr.aws
 1042  aws ecr-public get-login-password --region us-west-2
 1043  aws ecr-public get-login-password --region us-east-1
 1044  docker push public.ecr.aws/mptaws/secret-ecs-repo
 1045  echo $APP
 1046  git commit -am "update"
 1047  rm -rf secret
 1048  hugo -v
 1049  hugo --help
 1050  hugo
 1051  npx hugo -v
 1052  npx hugo help
 1053  npx hugo version
 1054  npx hugo upgrade
 1055  npm install hugo
 1056  npm upgrade hugo
 1057  npm install --save
 1058  npm install hugo --save-dev
 1059  npm install --save-dev
 1060  npm install hugo-bin --save-dev
 1061  git revert package.json
 1062  git pull package.json
 1063  git commit -am "revisions requested"
 1064  git commit -am "spelling review"
 1065  cd public
 1066  cd static
 1067  git revert lib/ecs-fargate-stack.ts
 1068  history | grep git
 1069  git restore lib/ecs-fargate-stack.ts
 1070  rm .DS_Store
 1071  git commit -am "add ssm version of ecs-fargate-stack"
 1072  npm install --global github-spellcheck-cli
 1073  github-spellcheck -r https://github.com/mptaws/ecsworkshop -q --branch main --no-pr
 1074  github-spellcheck -r https://github.com/mptaws/ecsworkshop -q --branch main --no-pr -t caea363b53b1a9c4049f56a974891d95b78d6c16
 1075  cd content/secrets
 1076  git commit -am "final revs - more spelling errors"
 1077  git commit -am "minor rev - fix up formatting"
 1078  export AWS_CDK_VERSION="1.93.0"\n\n#\nnpm install -g --force aws-cdk@$AWS_CDK_VERSION
 1079  gh repo clone mptaws/yelb
 1080  cd yelb
 1081  chmod +x yelb/deployments/localdevelopment/setupdevenv.sh\nyelb/deployments/localdevelopment/setupdevenv.sh
 1082  chmod +x yelb/deployments/localdevelopment/setupdevenv.sh
 1083  brew install ng
 1084  ruby --version
 1085  npm install -g ng
 1086  yelb/deployments/localdevelopment/setupdevenv.sh
 1087  rm -rf yelb
 1088  mkdir demotest
 1089  npm init -y
 1090  npm install express redis axios
 1091  lazygit "add startup script"
 1092  echo $ACCOUNT_ID
 1093  lazygit "remove block from manifest"
 1094  npm remove nodemon
 1095  lazygit "remove nodemon"
 1096  lazygit "update prereq"
 1097  url=$(copilot svc show --json | jq -r .routes[].url)\ncurl -s $url/migrate | jq\n
 1098  copilot svc show --json
 1099  copilot svc show --json | jq -r .routes[].url
 1100  copilot svc show --json | jq
 1101  copilot svc show --json | jq -r .routes[]
 1102  curl -s $url/migrate | jq
 1103  copilot svc show --json | jq -r '.routes[].url'
 1104  git commit -am "add test security group ingress"
 1105  url=$(copilot svc show --json | jq -r '.routes[].url')
 1106  curl -s $url
 1107  git restore copilot/todo-app/addons/db.yml
 1108  git restore ~1 copilot/todo-app/addons/db.yml
 1109  cfn-lint copilot/todo-app/addons/db.yml
 1110  git commit -am "rollback"
 1111  copilot init –app mydemo\n  --name todo-app\n  --type 'Load Balanced Web Service\n  --dockerfile './Dockerfile'\n  --port 4000\n  --deploy\n
 1112  ▶ copilot init –app mydemo \n --name todo-app\n --type 'Load Balanced Web Service'\n --dockerfile './Dockerfile'\n --port 4000\n --deploy
 1113  ▶ copilot init --app mydemo \n --name todo-app\n --type 'Load Balanced Web Service'\n --dockerfile './Dockerfile'\n --port 4000\n --deploy
 1114  copilot init --app mydemo --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 1115  cd
 1116  git clone https://github.com/duo-labs/cloudmapper.git
 1117  cd cloudmapper
 1118  brew install pkg-config
 1119  brew install libfreetype6-dev
 1120  brew install freetype
 1121  brew install autoconf
 1122  brew install automake
 1123  brew install libtool
 1124  python cloudmapper.py collect --account my_account
 1125  python cloudmapper.py collect --account 445164711350
 1126  pip install pyyaml
 1127  sudo pip install -r requirements.txt
 1128  python cloudmapper.py collect --account prod
 1129  python cloudmapper.py report --account prod
 1130  python cloudmapper.py webserver
 1131  url=$(copilot svc show --json | jq -r .routes[].url)\ncurl -s $url
 1132  curl $url
 1133  echo $url
 1134  url=http://mydem-publi-kgmbr2pvvr4g-115285501.us-west-2.elb.amazonaws.com
 1135  curl -s $url/migrate
 1136  git restore package-lock.json
 1137  git commit -am "updated secure parameter section to account for a bug uncovered in copilot 1.4"
 1138  git clone https://github.com/mptaws/secretecs.git
 1139  git commit -am "add secrets back into manifest to deal with copilot 1.4 release bug"
 1140  curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"\nsudo installer -pkg AWSCLIV2.pkg -target /
 1141  aws s3api help
 1142  aws s3api create-bucket --bucket mpt-deploy-bucket
 1143  aws s3api create-bucket --bucket mpt-deploy-bucket --region us-west-2
 1144  aws s3api create-bucket --bucket mpt-deploy-bucket --region us-east-1
 1145  pip3 install aws-shell
 1146  aws-shell
 1147  cfn-lint ~/Desktop/test.yml
 1148  cfn-lint validate ~/Desktop/test.yml
 1149  cfn-lint help
 1150  cfn-lint
 1151  mv ~/Desktop/test.yml ~/Desktop/test.yaml
 1152  cfn-lint ~/Desktop/test.yaml
 1153  cfn-lint ~/Desktop/test.yaml --debug
 1154  git restore package.json package-lock.json
 1155  git commit -am "Updated order of chapters to accomodate for cloudformation / copilot bug"
 1156  git commit -am "updated flow for SSM param first"
 1157  gh repo clone thecarlhall/aws-nuke
 1158  atom ~/.aws/config
 1159  atom ~/.aws/credentials
 1160  make install
 1161  cd config
 1162  atom isengard.yaml
 1163  source ~/.aws/config
 1164  source ~/.aws/credentials
 1165  cd aws-nuke
 1166  cd code/aws-nuke
 1167  ./dist/aws-nuke -c config/isengard.yaml --profile isengard > test.txt
 1168  cat test.txt
 1169  ./dist/aws-nuke -c config/isengard.yaml --profile isengard --verbose 2>&1 | tee output.txt
 1170  rm output.txt
 1171  atom output.txt
 1172  ./dist/aws-nuke -c config/isengard.yaml --profile isengard 2>&1 | tee output1.txt
 1173  atom output1.txt
 1174  ./dist/aws-nuke -c config/isengard.yaml --profile isengard 2>&1 | tee output2.txt
 1175  ./dist/aws-nuke -c config/isengard.yaml --profile isengard 2>&1 | tee output3.txt
 1176  ./dist/aws-nuke -c config/isengard.yaml --profile isengard 2>&1 | tee output4.txt
 1177  ./dist/aws-nuke -c config/isengard.yaml --profile isengard --no-dry-run
 1178  ./dist/aws-nuke -c config/isengard.yaml --profile isengard
 1179  git restore settings.json
 1180  git restore .vscode/settings.json
 1181  git commit -am "bug smash"
 1182  cdk -version
 1183  git commit -am "fixed"
 1184  git commit -am "fixed some more"
 1185  git commit -am "final changes - cleanup fixes"
 1186  APPNEW=ecsworkshop$(tr -dc A-Za-z0-9 </dev/urandom | head -c 4 ; echo '')
 1187  git commit -am "fix bash bug"
 1188  git restore config/isengard.yml
 1189  rm config/isengard.yaml
 1190  git checkout isengard
 1191  ./dist/aws-nuke help
 1192  cd ~/code/aws-nuke
 1193  history | grep nuke
 1194  ./dist/aws-nuke -c config/isengard.yaml --profile isengard 2>&1 | tee output.txt
 1195  mkdir dotnettest
 1196  cd dotnettest
 1197  cd code/test-app
 1198  libman
 1199  dotnet tool install -g Microsoft.Web.LibraryManager.Cli
 1200  libman install @microsoft/signalr@latest -p unpkg -d wwwroot/js/signalr --files dist/browser/signalr.js --files dist/browser/signalr.min.js
 1201  dotnet net webapp -o RazorPagesMovie
 1202  dotnet new webapp -o RazorPagesMovie
 1203  code -r RazorPagesMovie
 1204  dotnet dev-certs https --trust
 1205  dotnet tool install --gloal dotnet-ef
 1206  dotnet-aspnet-codegenerator razorpage -m Movie -dc RazorPagesMovieContext -udl -outDir Pages\Movies --referenceScriptLibraries
 1207  dotnet tool update -g Dotnet-aspnet-codegenerator
 1208  dotnet tool uninstall --global dotnet-aspnet-codegenerator\ndotnet tool install --global dotnet-aspnet-codegenerator\n
 1209  zsh -l
 1210  ls -ltraz
 1211  dotnet new webapp -o RazorPagesMovie\ncode -r RazorPagesMovie
 1212  dotnet tool install --global dotnet-ef\ndotnet tool install --global dotnet-aspnet-codegenerator\ndotnet add package Microsoft.EntityFrameworkCore.SQLite\ndotnet add package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\ndotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design\ndotnet add package Microsoft.EntityFrameworkCore.Design\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\ndotnet add package Microsoft.Extensions.Logging.Debug
 1213  dotnet-aspnet-codegenerator razorpage -m Movie -dc RazorPagesMovieContext -udl -outDir Pages/Movies --referenceScriptLibraries
 1214  dotnet tool install --global dotnet-ef
 1215  dotnet ef migrations add InitialCreate\ndotnet ef database update
 1216  dotnet ef database update
 1217  node --vesrion
 1218  gh clone trycatchlearn/reactivities
 1219  gh rep trycatchlearn/reactivities
 1220  gh repo trycatchlearn/reactivities
 1221  gh repo clone trycatchlearn/reactivities
 1222  mkdir dotnet
 1223  cd dotnet
 1224  rm -rf dotnet
 1225  mkdir dontnetactivities
 1226  cd dontnetactivities
 1227  dotnet sln Application
 1228  dotnet sln
 1229  dotnet ef -h
 1230  echo $DOTNET_ENVIRONMENT
 1231  mkdir demo
 1232  copilot -help
 1233  copilot init –app mydemo123\n --name todo-app\n --type ‘Load Balanced Web Service’\n --dockerfile ‘./Dockerfile’\n --port 4000\n --deploy\n
 1234  copilot init –app mydemo --name todo-app --type ‘Load Balanced Web Service’ --dockerfile ‘./Dockerfile’ --port 4000 --deploy\n
 1235  copilot init –app mydemo --name todo-app --type ‘Load Balanced Web Service’ --dockerfile ‘./Dockerfile’ --port 4000 --deploy
 1236  copilot init –-app mydemo --name todo-app --type ‘Load Balanced Web Service’ --dockerfile ‘./Dockerfile’ --port 4000 --deploy
 1237  copilot init --app ecsworkshop --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy\n
 1238  rm -rf ~/.aws
 1239  \nsudo curl -Lo /usr/local/bin/copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux && sudo chmod +x /usr/local/bin/copilot\n
 1240  brew installl copilot
 1241  brew link copilot
 1242  brew link --overwrite copilot
 1243  copilot svc delete
 1244  copilot app help
 1245  copilot app delete mydemo54321
 1246  copilot app init --name myhdemo54321
 1247  copilot app init --app myhdemo54321
 1248  copilot init --app myhdemo54321
 1249  copilot app ls
 1250  copilot svc ls
 1251  copilot init –-app mydemo456 --name todo-app --type ‘Load Balanced Web Service’ --dockerfile ‘./Dockerfile’ --port 4000 --deploy
 1252  copilot init –-app mydemo456 --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 1253  mv copilot/todo-app/addons/db.yml .
 1254  cat .workspace
 1255  mkdir what
 1256  cd what
 1257  copy ~/demo/secretecs/Dockerfile .
 1258  cp ~/demo/secretecs/Dockerfile .
 1259  touch app/app.yml
 1260  cd ~/code/secret
 1261  cd demop
 1262  cd ~/demo
 1263  git clone git@github.com:mptaws/secretecs
 1264  mkdir app
 1265  touch app.yml
 1266  copilot init --app mydemo12343 --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 1267  APPNEW=ecsworkshop$(tr -dc a-z0-9 </dev/urandom | head -c 4 ; echo '') \ncopilot init --app $APPNEW --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy\n
 1268  copilot init --app ecsworkshopfromosx --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 1269  rm -rf demo
 1270  dotnet ef migrationns remove InitialCreate
 1271  ef migrations remove
 1272  dotnet ef migrationns remove
 1273  dotnet ef database -h
 1274  dotnet watch run --project dontnetactivities.sln
 1275  rm -rf dontnetactivities
 1276  clea
 1277  mkdir Reactivities
 1278  dotnet new -l
 1279  dotnet new gitignore
 1280  git commit -m "initial repo"
 1281  cd ~/code/secret-ecs-cdk-example
 1282  npm --versoin
 1283  npm upgrade
 1284  brew upgrade npm
 1285  npm upgrade -g upgrade
 1286  npm install -g npm@next
 1287  npx create-react-app client-app --use-npm --template typescript
 1288  aws ec2 allocate-hosts --region us-east-1 --instance-type mac1.metal --availability-zone us-east-1b --auto-placement "on" --quantity 1
 1289  npm install semantic-ui-react semantic-ui-css
 1290  git reset HEAD
 1291  git commit -am "alsdkjfal"
 1292  npm install uuid
 1293  npm i --save-dev @types/uuid
 1294  git commit -am "end module 5"
 1295  npm install mobx mobx-react-lite
 1296  lazygit "end of section 7"
 1297  npm install react-router-dom
 1298  npm install @types/react-router-dom --save-dev
 1299  lazygit "end of section 8"
 1300  npm install react-calendar
 1301  npm install @types/react-calendar
 1302  lazygit "end of section 9"
 1303  npm install react-toastify
 1304  npm install formik
 1305  npm install yup
 1306  npm install @types/yup
 1307  npm install @types/yup --save-dev
 1308  npm install react-datepicker
 1309  npm install @types/react-datepicker
 1310  npm install @types/react-datepicker --save-dev
 1311  npm ls date-fns
 1312  npm install date-fns@2.19.0
 1313  dotnet ef migrations add IdentityAdded -p Persistence -s API
 1314  dotnet ef migrations add ActivityAttendee -p Persistence -s API
 1315  dotnet new classlib -n Infrastructure
 1316  dotnet sln add Infrastructure
 1317  cd Infrastructure
 1318  dotnet add reference ../Infrastructure
 1319  dotnet ef migrations add AddCancelledProperty -p Persistence -s API
 1320  open ~/Library/Application\ Support/Microsoft/Office
 1321  open ~/Library/Application\ Support/Microsoft
 1322  dotnet ef migrations add PhotoEntityAdded -p Persistence -s API
 1323  aws seed list-templates
 1324  sudo /usr/bin/profiles show -type enrollment | grep Name
 1325  sudo /usr/bin/profiles renew -type enrollment
 1326  sudo jamf policy
 1327  sudo jamf recon
 1328  aws seed help
 1329  aws seed sso
 1330  aws seed sso help
 1331  aws seed
 1332  cd AP
 1333  npm install react-dropzone
 1334  npm install react-cropper
 1335  npm install react-cropper --saVe
 1336  history | grep migrations
 1337  dotnet ef migrations remove
 1338  dotnet ef migrations remove -p Persistence
 1339  dotnet ef migrations add CommentEntityAdded1 -p Persistence -s API
 1340  npm install @microsoft/signalr
 1341  dotnet ef migrations help
 1342  dotnet ef migrations --help
 1343  history | grep drop
 1344  cd PI
 1345  dotnet ef database drop -p Persistence -s API
 1346  dotnet ef migrations remove -p Persistence -s API
 1347  dotnet ef migrations add CommentEntityAdded -p Persistence -s API
 1348  lazygit "end of next section"
 1349  lazygit "end of next section1"
 1350  dotnet ef migrations add FollowingEntityAdded -p Persistence -s API
 1351  lazygit "end of section 20"
 1352  npm install react-infinite-scroller
 1353  npm install react-infinite-scroller --legacy-peer-deps
 1354  npm install @types/react-infinite-scroller
 1355  lazygit "placeholder"
 1356  docker
 1357  cd ~/Reactivities
 1358  touch test.txt
 1359  rm test.txt
 1360  docker run --name dev -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=secret -p 5432:5432 -d postgres:latest
 1361  dotnet ef migrations add PGInitial -p Persistence -s API
 1362  dotnet watcch run
 1363  brew tap heroku/brew && brew install heroku
 1364  heroku login
 1365  lazygit "updated"
 1366  heroku git:remote -a reactivitiesdemo
 1367  heroku buildpacks:set https://github.com/jincod/dotnetcore-buildpack
 1368  git commit -am "before heroku"
 1369  git commit -m "updated security"
 1370  git push heroku master
 1371  eval "$(ssh-agent -s)"
 1372  open ~/.ssh./config
 1373  rm id_tuzman_ed25519
 1374  rm id_tuzman_ed25519.pub
 1375  ssh-keygen -t ed25519 -C "tuzman@gmail.com"
 1376  ssh-add ~/.ssh/id_tuz_ed25519
 1377  ssh-add -l
 1378  ssh-add ~/.ssh/id_ed25519
 1379  open ~/.ssh/config
 1380  git remote add origin git@github.com:tuzman/reactivities.git
 1381  pbcopy < ~/.ssh/id_tuz_ed25519.pub
 1382  ssh-add -K ~/.ssh/id_tuz_ed25519
 1383  git config user.name tuzman@gmail.com
 1384  git remote rm origin
 1385  git remote add origin git@github-tuzman:tuzman/reactivities.git
 1386  lazygit "all"
 1387  git checkout fbLogin
 1388  git checkout head
 1389  rm -rf Reactivities
 1390  code ~/.ssh/config
 1391  git checkout git@github-tuzman tuzman/reactivities.git
 1392  git checkout git@github-tuzman/tuzman/reactivities.git
 1393  git checkout git@github-tuzman/tuzman/reactivities
 1394  git checkout git@github-tuzman:tuzman/reactivities.git
 1395  cd reactivities
 1396  npn start
 1397  dotnet package add Microsoft.AspNetCore
 1398  cd ../Infra
 1399  cd ../Infrastructure
 1400  dotnet add package Microsoft.AspNetCore
 1401  rm -rf reactivities
 1402  git clone githubn-tuzman:tuzman@reactivities.git
 1403  git clone github-tuzman:tuzman@reactivities.git
 1404  git clone git@github-tuzman:tuzman/reactivities.git
 1405  code reactivities
 1406  dotnet list Reactivities.sln package
 1407  dotnet list package
 1408  dotnet add package MediatR
 1409  cd ../Application
 1410  dotnet add package Microsoft.EntityFrameworkCore
 1411  dotnet add package AutoMapper
 1412  cd ../Domain
 1413  dotnet add package Microsoft.AspNetCore.Identity
 1414  git commit -m "alkskdfj"
 1415  git push -u origin master
 1416  git config user.email tuzman@gmail.com
 1417  git config user.name tuzman
 1418  git push -u tuzman origin master
 1419  git config --local credential.helper ""
 1420  git config remote.origin.url
 1421  git config --global user.email "tuzman@gmail.com"
 1422  git config
 1423  git config --unset-all
 1424  git config --unset-all --local
 1425  git config -e
 1426  git config user.email
 1427  git push tuzman@github-tuzman/reactivities.git
 1428  git push git@github-tuzman/reactivities.git
 1429  cd ~/.ssh
 1430  code config
 1431  ssh-add -D
 1432  cd ~/reactivities
 1433  git push
 1434  npm install @types/facebook-js-sdk
 1435  npm install @types/facebook-js-sdk --save-dev
 1436  git checkout -b fbLogin
 1437  npm install rimraf --save-dev
 1438  git commit -m "facebook login"
 1439  git push origin fbLogin
 1440  git merge fbLogin
 1441  git branch -d master
 1442  git branch ls
 1443  git branch -D master
 1444  git branch
 1445  git branch -D ls
 1446  git branch -D fbLogin
 1447  git checkout -b RefreshTokens
 1448  dotnet ef migrations add RefreshTokens -p Persistence -s API
 1449  dotnet tool update --global dotnet-ef
 1450  cd client-app
 1451  cd ../API
 1452  git commit -m "updated"
 1453  git push origin RefreshTokens
 1454  git merge RefreshTokens
 1455  git commit -m "finaliized"
 1456  brew prune
 1457  brew link awscli
 1458  brew link --overwrite awscli
 1459  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
 1460  brew style --fix aws-sam-cli
 1461  mkdir realworld
 1462  cd realworld
 1463  gh repo clone gothinkster/aspnetcore-realworld-example-app
 1464  cd aspnetcore-realworld-example-app
 1465  make build
 1466  make run
 1467  dotnet --info
 1468  dotnet run build -p build/build.csproj
 1469  open Conduit.sln
 1470  dotnet upgrade
 1471  dotnet list reference
 1472  cd build
 1473  dotnet install script
 1474  rm -rf /usr/local/opt/lzo
 1475  sudo rm -rf /usr/local/opt/lzo
 1476  brew update\nbrew install mono-libgdiplus
 1477  cd ~/realworld/aspnetcore-realworld-example-app
 1478  brew install amazon-chime
 1479  unset
 1480  unset todo
 1481  unset env
 1482  deativate
 1483  conda deactivate
 1484  source deactivate
 1485  cd demotest
 1486  rm -rf demotest
 1487  rm AWSCLIV2.pkg
 1488  export
 1489  export | grep todo
 1490  conda
 1491  brew remove virtualenv
 1492  brew install android-studio
 1493  deactivate
 1494  cat .env
 1495  subl .zshrc
 1496  atom .zshrc
 1497  lsvirtualenv -b
 1498  atom ~/.p10k.zsh
 1499  p10k config
 1500  code -r ~/.p10k.zsh
 1501  todo.sh
 1502  todo.sh -h
 1503  todo.sh listall
 1504  todo.sh -h > todo.help
 1505  code -r todo.help
 1506  brew install todo-txt
 1507  cp -n /usr/local/opt/todo-txt/todo.cfg ~/.todo.cfg
 1508  todo
 1509  todo listall
 1510  todo del 1
 1511  todo del 2
 1512  todo report
 1513  todo shorthelp
 1514  todo shorthelp | jq
 1515  code ~/.aws/credentials
 1516  gh
 1517  gh repo help
 1518  gh repo create svrless-api-crud
 1519  git checkout
 1520  git branch -m main
 1521  git push origin -u main
 1522  git push origin -delete master
 1523  git push origin -`delete master
 1524  git push origin --delete master
 1525  git push origin --delete main
 1526  git branch --unset-upstream
 1527  git clone git@github.com/mptaws/svrless-api-crud
 1528  code -r ~/.ssh/config
 1529  git clone git@github-tuszym/mptaws/svrless-api-crud
 1530  git clone git@github.com:mptaws/svrless-api-crud.git
 1531  git clone git@github-tuszym:mptaws/svrless-api-crud.git
 1532  cd svrless-api-crud
 1533  mkdir ~/.git-template
 1534  code -r ~/.git-template/HEAD
 1535  git config --global init.templateDir ~/.git-template
 1536  mkdir tester && cd tester
 1537  rm -rf tester
 1538  mkdir mytest
 1539  cd mytest
 1540  code -r ~/.git
 1541  rm -rf ~/.git-template
 1542  mkdir mytest2
 1543  cd mytest2
 1544  rm -rf mytest mytest2
 1545  mkdir mytest3 && cd mytest3 && git init
 1546  git config --global --list
 1547  code -r ~/.gitconfig
 1548  cd .,.
 1549  rm -rf mytest3
 1550  mkdir mytester
 1551  cd my
 1552  mytester
 1553  cd .git
 1554  cat HEAD
 1555  rm mytester
 1556  rm -rf mytester
 1557  git -v
 1558  brew upgrade git
 1559  brew install git
 1560  alias | grep mkdir
 1561  code -r ~/.oh-my-zsh/custom
 1562  man mkdir
 1563  mdcd tester
 1564  mdcd tester1
 1565  tester
 1566  ls]
 1567  rm -rf 1=cd-
 1568  ls -tlra
 1569  kill -9 2242
 1570  ps -ef | grep git
 1571  ps -ef
 1572  pls
 1573  sudo ls
 1574  y
 1575  sudo rm -R /Users/tuszym/.Trash/1=cd\ - /Users/tuszym/.Trash/1=cd\ -\ 9.39.09\ AM
 1576  for f in ~/.Trash; do echo rm "$f"; done
 1577  for f in ~/.Trash/; do echo rm "$f"; done
 1578  cd ~/.Trash
 1579  for f in *.*; do echo rm "$f"; done
 1580  rsync
 1581  rsync -a --delete ~/.test ./1=cd\ -
 1582  cd 1=cd\ -
 1583  perl -e
 1584  erl -e 'for(<*>){((stat)[9]<(unlink))}'
 1585  perl -e 'for(<*>){((stat)[9]<(unlink))}'
 1586  find . | wc -l
 1587  rm -rf /Volumes/*/.Trashes
 1588  sudo rm -R /Users/tuszym/Desktop/1=cd\ -
 1589  sudo rm -R /Users/tuszym/Desktop/1=cd\ -\ 9.39.09\ AM
 1590  code -r ~/.oh-my-zsh/custom/mpt-alias.zsh
 1591  take mytest
 1592  d
 1593  cd -1
 1594  g
 1595  gaa
 1596  ea
 1597  ls --color
 1598  zpm
 1599  brew install zpm
 1600  code -r ~/.zshrc
 1601  code -r ~/.antigenrc
 1602  which antigen
 1603  curl -L git.io/antigen > antigen.zsh
 1604  mv ~/antigen.zsh ~/.antigen.zsh
 1605  ls -0G
 1606  ls -G
 1607  chmod 755 .antigen.zsh
 1608  ~/.antigen.zsh
 1609  zsh --version
 1610  mv .antigen.zsh antigen.zsh
 1611  cat ~/antigen.zsh
 1612  edit antigen.zsh
 1613  open antigen.zsh
 1614  code ~/antigen.zsh
 1615  rm ~/antigen.zsh
 1616  brew install antigen
 1617  code ~/.antigenrc
 1618  antigen install ls
 1619  code ~/.antigenrcc
 1620  code /Users/tuszym/.antigenrc
 1621  lsl
 1622  ls -lG
 1623  la
 1624  rm test.yml
 1625  rm test2.yml
 1626  anitgen
 1627  antigen
 1628  antigen help
 1629  antigen list
 1630  cd ~/.oh-my-zsh/custom/plugins\ngit clone https://github.com/zpm-zsh/ls.git
 1631  l
 1632  brew uninstall antigen
 1633  cd ~/.oh-my-zsh/custom
 1634  npm -g list
 1635  n
 1636  ng
 1637  npx ng
 1638  cdk update
 1639  cdk upgrade
 1640  cdk --help
 1641  rm -R globurl=noglob\ urlglobber\ 
 1642  rm antigen.zsh
 1643  t add test
 1644  t remove test
 1645  t delete test
 1646  t del test
 1647  t del 1
 1648  rm scratch.txt
 1649  take projects
 1650  cd ~/projects/mm_demo
 1651  npm i --no-save source-map-support
 1652  npm i -g source-map-support
 1653  npm install -g @aws-cdk/cx-api
 1654  npm install -g colors/safe
 1655  npm install -g @aws-cdk/colors/safe
 1656  npm install -g @aws-cdk/colors
 1657  npm install colors
 1658  cdk init --type typescript
 1659  npm remove @aws-cdk
 1660  npm remove -g @aws-cdk
 1661  npm --help
 1662  npm uninstall -g @aws-cdk
 1663  nvm update
 1664  brew update nvm
 1665  brew upgrade nvm
 1666  nvm uninstall default
 1667  cd ~/.nvm/versions/node
 1668  cd v14.16.0
 1669  rm -rf cdk
 1670  ../lib/node_modules
 1671  rm -rf aws-cdk
 1672  cd _
 1673  cd -
 1674  cd projects/mm_demo
 1675  rm package
 1676  rm package*
 1677  history | grep typescript
 1678  mkdir resources
 1679  npm install @aws-cdk/aws-apigateway @aws-cdk/aws-lambda @aws-cdk/aws-s3
 1680  curl -X GET 'https://m0axobbxf0.execute-api.us-west-2.amazonaws.com/prod/'
 1681  curl -X GET 'https://m0axobbxf0.execute-api.us-west-2.amazonaws.com/prod/' | jq
 1682  curl -sX GET 'https://m0axobbxf0.execute-api.us-west-2.amazonaws.com/prod/example' | jq
 1683  curl -sX DELETE 'https://m0axobbxf0.execute-api.us-west-2.amazonaws.com/prod/example' | jq
 1684  curl -sX DELETE 'https://m0axobbxf0.execute-api.us-west-2.amazonaws.com/prod/example'
 1685  curl -sX GET 'https://m0axobbxf0.execute-api.us-west-2.amazonaws.com/prod/' | jq
 1686  curl -sX POST 'https://m0axobbxf0.execute-api.us-west-2.amazonaws.com/prod/example' | jq
 1687  aws s3 list
 1688  aws s3 ls s3://mmdemostack-widgetswidgetstore0ed7fdb7-hjo26ktdqima
 1689  rm -rf mm_demo
 1690  gh repo clone cdk-patterns/serverless
 1691  cd serverless
 1692  ls -tra
 1693  cd the-simple-webservice
 1694  cd typescript
 1695  cd ~/projects
 1696  take mmdemo
 1697  cd bin
 1698  chmod 777 bin\n: 1618951072:0;chmod 777 bin
 1699  git commit -m "test"
 1700  rm -rf mmdemo
 1701  take mm_demo
 1702  npm install @aws-cdk/aws-lambda
 1703  npm install @aws-cdk/aws-apigatewayv2
 1704  npm install @aws-cdk/aws-apigatewayv2-integrations
 1705  npm install @aws-sdk
 1706  npm install aws-sdk
 1707  cd ~/serverless/the-simple-webservice
 1708  git commit -am "adsfjlksjd"
 1709  npm run deploy
 1710  curl -s https://m22wv60d0a.execute-api.us-west-2.amazonaws.com/
 1711  h | grep aws-cdk
 1712  gh repo clone mptaws/apidemo
 1713  cd apidemo
 1714  gh repo clone shafkevi/cdk-cognito-lambda-dynamo-api
 1715  cd ~/code/cdk-cognito-lambda-dynamo-api
 1716  alias edit="code"
 1717  which edit
 1718  npm install -g aws-lambda
 1719  npm uninstall -g aws-lambda
 1720  npm install aws-lambda --save-dev
 1721  npm install axios --save-dev
 1722  npm i --save-dev @types/aws-lambda
 1723  npm remove aws-lambda axios
 1724  npm run clean
 1725  git restore HEAD
 1726  git checkout master
 1727  h | grep cdk
 1728  cd cdk-cognito-lambda-dynamo-api-master
 1729  rm .gitignore .git
 1730  git commit -am "Initial Commit"
 1731  npm install -g 'aws-cdk'
 1732  git commit -am "update gitignore\n"
 1733  cdk deploy -c image-tag:latest
 1734  cdk deploy -c image-tag=latest
 1735  take lambda-api-crud-example
 1736  npm install @aws-cdk/aws-apigateway @aws-cdk/aws-lambda
 1737  npm run watch
 1738  take api-crud-workshop
 1739  cdk init sample-app --language typescript
 1740  npm install @aws-cdk/aws-apigateway
 1741  npm install @aws-cdk/aws-lambda\n
 1742  npm install @aws-cdk/aws-dynamodb
 1743  curl -i https://1wcahim4tk.execute-api.us-west-2.amazonaws.com/prod/
 1744  curl -i https://1wcahim4tk.execute-api.us-west-2.amazonaws.com/prod/hello
 1745  npm install cdk-dynamo-table-viewer
 1746  curl -i https://1wcahim4tk.execute-api.us-west-2.amazonaws.com/prod/hello/world
 1747  git remote add origin https://github.com/mptaws/cdk-lambda-api-crud.git
 1748  lazygit "intital commit - working locally"
 1749  lazygit "fix image"
 1750  lazygit "remove unused import, update readme"
 1751  git remote
 1752  git remote ls
 1753  git remote -v
 1754  git add lambda
 1755  git statu
 1756  git commit -am "removed js ignore, added in missing lambdas"
 1757  gh repo clone mptaws/cdk-cognito-lambda-dynamo-api
 1758  cd cdk-cognito-lambda-dynamo-api
 1759  take windows-workload-ecs
 1760  npm install @aws-cdk/core @aws-cdk/aws-ecs @aws-cdk/aws-ec2 @aws-cdk/aws-autoscaling
 1761  mkdir API
 1762  take API
 1763  rm -rf API
 1764  dotnet sln add API/API.csproj
 1765  cd Reactivities
 1766  history | grep NWebSec
 1767  take dn-api-server
 1768  dotnet new sln
 1769  dotnet new webapi -n API
 1770  dotnet new classlib -n Application
 1771  dotnet new classlib -n Domain
 1772  dotnet new classlib -n Persistence
 1773  dotnet sln add API/
 1774  dotnet sln add Application
 1775  dotnet sln add Domain
 1776  dotnet sln add Persistence
 1777  dotnet sln list
 1778  dotnet add reference ../Application
 1779  dotnet add reference ../Persistence
 1780  cd Persistence
 1781  dotnet add reference ../Domain
 1782  git commit -am "empty project"
 1783  dotnet tool list --global
 1784  dotnet ef migrations add InitialCreate -p Persistence -s API
 1785  git commit -am "base api implementation"
 1786  git commit -am "skeletal API complete"
 1787  git remote add origin https://github.com/mptaws/dn-api-server.git\ngit push -u origin main
 1788  code
 1789  rm -rf test
 1790  take demoapp
 1791  create-react-app .
 1792  rm -rf demoapp
 1793  take simple-typescript
 1794  npm i -D typescript
 1795  rm -rf simple-typescript
 1796  npx create-react-app jbook --template typescript
 1797  jbook
 1798  npm install --save-exact esbuild-wasm@0.8.27
 1799  npm install --save-dev @types/esbuild
 1800  npm view react dist.tarball
 1801  npm install axios
 1802  npm install localforage
 1803  nuget install
 1804  dotnet install nuget
 1805  nuget -h
 1806  nuget --help
 1807  nuget
 1808  dotnet -h
 1809  cd ../../projects
 1810  git clone git@github.com/mptaws/dn-api-server
 1811  git clone git@github-tuszym/mptaws/dn-api-server
 1812  dotnet tool ist
 1813  dotnet tool list
 1814  cd //
 1815  cd projects/dn-api-server
 1816  open dn-api-server.sln
 1817  dotnet list
 1818  dotnet watch run --project API
 1819  dotnet "clean" "/Users/tuszym/projects/dn-api-server/API/API.csproj"
 1820  dotnet "run" "--project" "/Users/tuszym/projects/dn-api-server/API/API.csproj"
 1821  dotnet "restore" "/Users/tuszym/projects/dn-api-server/API/API.csproj"
 1822  dotnet "add" "/Users/tuszym/projects/dn-api-server/Application/Application.csproj" "reference" "/Users/tuszym/projects/dn-api-server/API/API.csproj"
 1823  dotnet "remove" "/Users/tuszym/projects/dn-api-server/Application/Application.csproj" "reference" "..\API\API.csproj"
 1824  dotnet "clean" "/Users/tuszym/projects/dn-api-server/dn-api-server.sln"
 1825  cd "/Users/tuszym/projects/dn-api-server"
 1826  dotnet "build" "/Users/tuszym/projects/dn-api-server/dn-api-server.sln"
 1827  dotnet "add" "/Users/tuszym/projects/dn-api-server/API/API.csproj" "reference" "/Users/tuszym/projects/dn-api-server/Domain/Domain.csproj"
 1828  dotnet "add" "/Users/tuszym/projects/dn-api-server/API/API.csproj" "reference" "/Users/tuszym/projects/dn-api-server/Persistence/Persistence.csproj"
 1829  dotnet "remove" "/Users/tuszym/projects/dn-api-server/API/API.csproj" "reference" "..\Domain\Domain.csproj"
 1830  dotnet "remove" "/Users/tuszym/projects/dn-api-server/API/API.csproj" "reference" "..\Persistence\Persistence.csproj"
 1831  cd api
 1832  cd ~/Downloads/Reactivities30-master
 1833  project
 1834  ~/projects
 1835  dotnet "build" "/Users/tuszym/projects/dn-api-server/API/API.csproj"
 1836  dotnet "remove" "/Users/tuszym/projects/dn-api-server/Persistence/Persistence.csproj" "reference" "..\Domain\Domain.csproj"
 1837  dotnet "remove" "/Users/tuszym/projects/dn-api-server/Application/Application.csproj" "reference" "..\Persistence\Persistence.csproj"
 1838  dotnet "remove" "/Users/tuszym/projects/dn-api-server/Application/Application.csproj" "reference" "..\Domain\Domain.csproj"
 1839  cd "."
 1840  dotnet "remove" "/Users/tuszym/projects/dn-api-server/API/API.csproj" "reference" "..\Application\Application.csproj"
 1841  cd "/Users/tuszym/projects/dn-api-server/API"
 1842  dotnet "add" "/Users/tuszym/projects/dn-api-server/API/API.csproj" "reference" "/Users/tuszym/projects/dn-api-server/Application/Application.csproj"
 1843  dotnet "add" "/Users/tuszym/projects/dn-api-server/Application/Application.csproj" "reference" "/Users/tuszym/projects/dn-api-server/Domain/Domain.csproj"
 1844  cd "/Users/tuszym/projects/dn-api-server/Application"
 1845  dotnet "add" "/Users/tuszym/projects/dn-api-server/Application/Application.csproj" "reference" "/Users/tuszym/projects/dn-api-server/Persistence/Persistence.csproj"
 1846  cd code/dn-api-server
 1847  API
 1848  take another
 1849  nuget restore
 1850  cake
 1851  dotnet restore --verbosity
 1852  dotnet restore --v
 1853  dotnet restore -v
 1854  dotnet restore --force-evaluate
 1855  git commit -m "fix gitignore"
 1856  git commit -am "all files"
 1857  cd Ap
 1858  Application
 1859  git pull .gitignore
 1860  cp ~/another/dn-api-server/.gitignore .
 1861  cd Application
 1862  git add .gitignore
 1863  git commit -am "gitignore"
 1864  git push -f origin main
 1865  git commit -am "added source"
 1866  cd another
 1867  h | grep clone
 1868  git clone git@github-tuszym:mptaws/dn-api-server
 1869  cd ~/
 1870  rm -rf another
 1871  projects
 1872  ll
 1873  ../code
 1874  cd jbook
 1875  dotnet --help
 1876  cd API
 1877  dockerfile build -t dn-api-server -f Dockerfile .
 1878  docker images
 1879  docker create --name dn-api-server-container dn-api-server
 1880  docker ps -a
 1881  docker start dn-api-server-container
 1882  dotnet clean
 1883  docker scan
 1884  docker build -t dn-api-svr-img -f Dockerfile .
 1885  git commit -am "updated to use single project - dockerized working locally"
 1886  take windows-workloads
 1887  npm install -g npm@7.11.1
 1888  touch README.md
 1889  git commit -am "added readme"
 1890  git push orign main
 1891  git commit -am "removed API folder - app to root"
 1892  dotnet publish -c Release
 1893  git commit -am "removed API folder - app to root - published"
 1894  sudo chown -R $(whoami) /usr/local/Cellar/cairo/1.16.0_5
 1895  brew link lzo
 1896  p10k configure
 1897  dn-api-server
 1898  git checkout ec2ecs
 1899  git checkout feature/ecsec2-cdk
 1900  npm install @aws-cdk/aws-iam@1.101.0
 1901  npm install @aws-cdk/aws-core@1.101.0
 1902  rm -rf package-lock.json
 1903  brew upgrade awscli
 1904  npm uninstall -g cdk
 1905  npm uninstall -g aws-cdk
 1906  git add -A
 1907  git commit -am "first working windows container build"
 1908  git remote add origin https://github.com/mptaws/ecs-windows-workloads.git
 1909  npm watch run
 1910  history | grep docker
 1911  dotnet publish
 1912  git commit -am "updated"
 1913  git commit -am "change dockerfile"
 1914  brew install things
 1915  npm install @aws-logs
 1916  git commit -am "change dotnet runtime"
 1917  cd ../windows-workload
 1918  git commit -am "fixed dockerfile"
 1919  cd ../dn-api-server
 1920  history | grep docker | grep build
 1921  docker build -t dn-api-server -f Dockerfile
 1922  docker build -t dn-api-server -f Dockerfile .
 1923  cd~
 1924  ~
 1925  docker run -it --rm -p 8000:80 --name aspnet_sample mcr.microsoft.com/dotnet/framework/samples:aspnetapp
 1926  docker run --rm mcr.microsoft.com/dotnet/framework/samples:dotnetapp
 1927  sudo rm -rf /usr/local/Cellar/python@3.9/3.9.2_1
 1928  lazygit "update"
 1929  lazygit "update again"
 1930  windows-workload
 1931  windows-workloads
 1932  take test-app
 1933  npx create-next-app
 1934  cd nextjs-course
 1935  cd ../../windows-workload
 1936  cd ../../windows-workloads
 1937  lazygit "update to working version"
 1938  cd ~/code/dn-api-server
 1939  git stash help
 1940  git stash drop
 1941  git checkout -b feature/sqlserver
 1942  nslookup nodename nor servname provided, or not known
 1943  nslookup api-mssqlserver.crq2yvpj2cdh.us-west-2.rds.amazonaws.com
 1944  take ssm-test
 1945  dotnet init
 1946  dotnet init .
 1947  dotnet new .
 1948  dotnet new webapi -o test
 1949  cd test
 1950  dotnet run
 1951  git commit -m "working sql server"
 1952  dotnet watch run
 1953  git commit -am "credential fix"
 1954  dotnet build
 1955  cdk destroy -f all
 1957  git commit -am "test if table exists"
 1958  git push origin feature/sqlserver
 1959  cdk deploy RDSStack --require-approval never
 1960  curl http://ECSWi-demoa-OJD6451YXWVJ-260048053.us-west-2.elb.amazonaws.com/api/todos/
 1961  cdk destroy -f -all && cdk deploy --all --require-approval never
 1962  cdk destroy -f --all && cdk deploy --all --require-approval never
 1963  git commit -am "working deployed"
 1964  history | grep aws-cdk
 1965  git commit -am "updated readme"
 1966  cd windows-workload
 1968  rm -rf secret-ecs-cdk-example
 1969  git clone git@github.com/mptaws/secret-ecs-cdk-example.git
 1970  git clone git@github.com:mptaws/secret-ecs-cdk-example.git
 1971  git commit -am "changed to ecr"
 1972  npm uninstall aws-cdk
 1973  rm /usr/local/bin/cdk
 1974  cdk --vesrsion
 1975  npm install -g --force aws-cdk
 1976  take tester
 1977  cdk init --language typescript .
 1978  which cdk
 1979  take new-windows-workloads
 1980  npm install @aws-cdk/aws-autoscaling
 1981  npm install @aws-cdk/aws-ecs
 1982  npm install @aws-cdk/aws-ecs-patterns
 1983  npm install @aws-cdk/aws-logs
 1984  npm install @aws-cdk/aws-rds
 1985  npm install @aws-cdk/aws-secretsmanager
 1986  npm remove -g --force aws-cdk
 1987  npm i -g --force aws-cdk@latest
 1988  npm install --save-dev @aws-cdk/aws-autoscaling
 1989  npm install --save-dev @aws-cdk/aws-ec2
 1990  npm install --save-dev @aws-cdk/aws-ecs
 1991  npm install --save-dev @aws-cdk/aws-ecs-patterns
 1992  npm install --save-dev @aws-cdk/aws-elasticloadbalancingv2
 1993  npm install --save-dev @aws-cdk/aws-logs
 1994  npm install --save-dev @aws-cdk/aws-rds
 1995  npm install --save-dev @aws-cdk/aws-secretsmanager
 1996  npm install --save-dev @aws-cdk/aws-iam
 1997  git commit -am "updated packages for cdk 103"
 1998  docker pull public.ecr.aws/o0u3i9v5/dnapiserver
 1999  docker pull public.ecr.aws/o0u3i9v5/dnapiserver:latest
 2000  aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
 2001  docker pull public.ecr.aws/mptaws/dnapiserver:latest
 2002  cd ~/code/ecs-codepipeline-demo
 2003  git commit -am "remove unneeded code"
 2004  cdk destroy -f --all
 2005  git commit -am "broken out vpc stack, minor code revisions for clarity"
 2006  take protonm
 2007  rm -rf protonm
 2008  take proton
 2009  account_id=`aws sts get-caller-identity|jq -r ".Account"`
 2010  echo $account_id
 2011  aws s3 cp s3://aws-proton-preview-public-files/model/proton-2020-07-20.normal.json .\naws s3 cp s3://aws-proton-preview-public-files/model/waiters2.json .\naws configure add-model --service-model file://proton-2020-07-20.normal.json --service-name proton-preview\nmv waiters2.json ~/.aws/models/proton-preview/2020-07-20/waiters-2.json\nrm proton-2020-07-20.normal.json
 2012  aws s3api create-bucket --region us-west-2 --bucket "proton-cli-templates-${account_id}" --create-bucket-configuration LocationConstraint=us-west-2
 2013  aws iam create-role --role-name ProtonServiceRole --assume-role-policy-document file://./policies/proton-service-assume-policy.json\n\naws iam attach-role-policy --role-name ProtonServiceRole --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
 2014  gh repo clone aws-samples/aws-proton-sample-templates
 2015  cd aws-proton-sample-templates
 2016  cd loadbalanced-fargate-svc
 2017  aws iam create-role --role-name ProtonServiceRole --assume-role-policy-document file://./policies/proton-service-assume-policy.json
 2018  aws iam attach-role-policy --role-name ProtonServiceRole --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
 2019  aws proton-preview update-account-roles --region us-west-2 --account-role-details "pipelineServiceRoleArn=arn:aws:iam::${account_id}:role/ProtonServiceRole"
 2020  aws proton-preview create-environment-template --region us-west-2 --template-name "public-vpc" --display-name "PublicVPC" --description "VPC with Public Access and ECS Cluster"\n
 2021  aws proton-preview create-environment-template-major-version --region us-west-2 --template-name "public-vpc" --description "Version 1"
 2022  tar -zcvf env-template.tar.gz environment/\n\naws s3 cp env-template.tar.gz s3://proton-cli-templates-${account_id}/env-template.tar.gz --region us-west-2\n\nrm env-template.tar.gz\n\naws proton-preview create-environment-template-minor-version --region us-west-2 --template-name "public-vpc" --description "Version 2" --major-version-id "1" --source-s3-bucket proton-cli-templates-${account_id} --source-s3-key env-template.tar.gz
 2023  aws proton-preview wait environment-template-registration-complete --region us-west-2 --template-name "public-vpc" --major-version-id "1" --minor-version-id "0"
 2024  aws proton-preview update-environment-template-minor-version --region us-west-2 --template-name "public-vpc" --major-version-id "1" --minor-version-id "0" --status "PUBLISHED"\n
 2025  aws proton-preview create-service-template --region us-west-2 --template-name "lb-fargate-service" --display-name "LoadbalancedFargateService" --description "Fargate Service with an Application Load Balancer"
 2026  aws proton-preview create-service-template-major-version --region us-west-2 --template-name "lb-fargate-service" --description "Version 1" --compatible-environment-template-major-version-arns arn:aws:proton:us-west-2:${account_id}:environment-template/public-vpc:1
 2027  tar -zcvf svc-template.tar.gz service/\n\naws s3 cp svc-template.tar.gz s3://proton-cli-templates-${account_id}/svc-template.tar.gz --region us-west-2\n\nrm svc-template.tar.gz\n\naws proton-preview create-service-template-minor-version --region us-west-2 --template-name "lb-fargate-service" --description "Version 1" --major-version-id "1" --source-s3-bucket proton-cli-templates-${account_id} --source-s3-key svc-template.tar.gz
 2028  aws proton-preview wait service-template-registration-complete --region us-west-2 --template-name "lb-fargate-service" --major-version-id "1" --minor-version-id "0"
 2029  aws proton-preview update-service-template-minor-version --region us-west-2 --template-name "lb-fargate-service" --major-version-id "1" --minor-version-id "0" --status "PUBLISHED"
 2030  aws proton-preview create-environment --region us-west-2 --environment-name "Beta" --environment-template-arn arn:aws:proton:us-west-2:${account_id}:environment-template/public-vpc --template-major-version-id 1 --proton-service-role-arn arn:aws:iam::${account_id}:role/ProtonServiceRole --spec file://specs/env-spec.yaml
 2031  aws proton-preview wait environment-deployment-complete --region us-west-2 --environment-name "Beta"\n
 2032  aws proton-preview create-service --region us-west-2 --service-name "front-end" --repository-connection-arn arn:aws:codestar-connections:us-west-2:${account_id}:connection/<your-codestar-connection-id> --repository-id "<your-source-repo-account>/<your-repository-name>" --branch "main" --template-major-version-id 1 --service-template-arn arn:aws:proton:us-west-2:${account_id}:service-template/lb-fargate-service --spec file://specs/svc-spec.yaml
 2033  aws proton-preview create-service --region us-west-2 --service-name "front-end" --repository-connection-arn arn:aws:codestar-connections:us-west-2:${account_id}:connection/<your-codestar-connection-id> --repository-id "mptaws/aws-proton-sample-fargate-service" --branch "main" --template-major-version-id 1 --service-template-arn arn:aws:proton:us-west-2:${account_id}:service-template/lb-fargate-service --spec file://specs/svc-spec.yaml
 2034  aws proton-preview create-service --region us-west-2 --service-name "front-end" --repository-connection-arn arn:aws:codestar-connections:us-west-2:934829527856:connection/522f2b2b-0e15-4ae6-bb17-e5eb0d944215 --repository-id "mptaws/aws-proton-sample-fargate-service" --branch "main" --template-major-version-id 1 --service-template-arn arn:aws:proton:us-west-2:${account_id}:service-template/lb-fargate-service --spec file://specs/svc-spec.yaml
 2035  aws proton-preview wait service-creation-complete --region us-west-2 --service-name "front-end"
 2036  aws proton-preview get-service --region us-west-2 --service-name "front-end" --query "service.pipeline.outputs" --output text\n\naws proton-preview get-service-instance --region us-west-2 --service-name "front-end" --service-instance-name "frontend-dev" --query "serviceInstance.outputs" --output text
 2037  aws proton-preview get-service --region us-west-2 --service-name "front-end" --query "service.pipeline.outputs" --output text | jq
 2038  aws proton-preview get-service-instance --region us-west-2 --service-name "front-end" --service-instance-name "frontend-dev" --query "serviceInstance.outputs" --output text | jq
 2039  cd service
 2040  gh clone repo mptaws:ecsworkshop
 2041  gh repo clone mptaws/ecsworkshop
 2042  git checkout -b develop
 2043  git checkout -b feature/windows-workloads-mpt
 2044  git merge upstream/main
 2045  git commit -am "upstream merge"
 2046  npm install font-awesome
 2047  git commit -am "fix fontawesome"
 2048  git merge develop
 2049  gc main
 2050  gcc main
 2051  git checkout feature/windows-workloads-mpt
 2052  git restore content/secrets/04-code-review/cdk.md
 2053  git commit -am "intial commit / scaffold"
 2054  git push origin feature/windows-workloads-mpt
 2055  git merge feature/windows-workloads-mpt
 2056  git push origin develop
 2057  take ecs-pipeline
 2058  cdk init . --language typescript
 2059  rm -rf ecs-pipeline
 2060  npm install -g -d -f aws-cdk@latest
 2061  take ecs-pipeline-demo
 2062  cdk init --list
 2063  npm install @aws-cdk/aws-codepipeline
 2064  npm install @aws-cdk/aws-codepipeline-actions
 2065  npm install @aws-cdk/pipelines
 2066  npm install @aws-cdk/aws-codebuild
 2067  npm install @aws-cdk/aws-ssm-module
 2068  npm remove @aws-cdk/aws-ssm
 2069  take demo-cra-app
 2070  npx create-react-app
 2071  npx create-react-app .
 2072  aws secretsmanager create-secret --name GithubOAuthToken --description "Github OAuth Token" --secret-string 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 --region us-west-2
 2073  git remote add origin https://github.com/mptaws/demo-cra-app.git
 2074  ../ecs-pipeline-demo
 2075  cdk synth | less
 2076  npm install @aws-cdk/aws-cloudfront-origins
 2077  npm install @aws-cdk/aws-route53-patterns
 2078  take cdk-static-site
 2079  npm install @aws-cdk/aws-route53
 2080  npm install --save-dev @aws-cdk/aws-s3
 2081  npm uninstall @aws-cdk/aws-s3
 2082  npm list -g
 2083  npm install @aws-cdk/aws-route53-targets
 2084  cd ../demo-cra-app
 2085  cat package.json
 2086  echo $CDK_DEFAULT_ACCOUNT
 2087  cdk bootstrap aws://934829527856/us-east-1
 2088  git commit -m "initial working commit"
 2089  git remote add origin https://github.com/mptaws/cdk-static-site.git
 2090  cd ecs-pipeline-demo
 2091  gh repo clone aws-samples/aws-cdk-examples
 2092  rm -rf aws-cdk-examples
 2093  https://github.com/mptaws/aws-cdk-examples.git
 2094  gh repo clone mptaws/aws-cdk-examples
 2095  cd aws-cdk-examples
 2096  cd typescript/static-site
 2097  git commit -am "modified to use non-public s3 bucket and cleanup project properly after termination"
 2098  lazygit "updated cdk"
 2099  cd ../aws-cdk-examples
 2100  git commmit --amend
 2101  git commit --amend
 2102  git push origin master -f
 2103  git commit -m "working"
 2104  git pull origin develop
 2105  git fetch
 2106  git checkout -b update-copilot-secrets-init
 2107  brew remove spectable
 2108  brew remove spectacle
 2109  brew install rectangle
 2110  sudo curl -Lo /usr/local/bin/copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux && sudo chmod +x /usr/local/bin/copilot
 2111  brew remove copilot
 2112  rm -rf /usr/local/bin/copilot
 2113  brew install copilot
 2114  copilot secret init
 2115  take copilot-test
 2116  rm -rf copilot-test
 2117  cd ~/environment\ngit clone git://github.com/mptaws/secretecs\ncd secretecs\nnpm install\n
 2118  cAPPNEW=ecsworkshop$(tr -dc a-z0-9 </dev/urandom | head -c 4 ; echo '')
 2119  APPNEW=ecsworkshop$(tr -dc a-z0-9 </dev/urandom | head -c 4 ; echo '')
 2120  tr
 2121  export LC_CTYPE=C
 2122  tr -dc a-z0-9 </dev/urandom
 2123  tr -dc a-z0-9 </dev/urandom | head -c 4 ; echo ''
 2124  tr -dc "a-zA-Z0-9-_\$\?" < /dev/urandom | head -c 10
 2125  cat /dev/urandom | env LC_CTYPE=C tr -dc $1 | head -c $2; echo;
 2126  \nenv LC_CTYPE=C tr -dc "a-zA-Z0-9" < /dev/urandom | head -c 10
 2127  \nenv LC_CTYPE=C tr -dc "a-z" < /dev/urandom | head -c 10
 2128  \nenv LC_CTYPE=C tr -dc "a-zA-Z0-9-_\$\?" < /dev/urandom | head -c 10
 2129  /bin/baah
 2130  /bin/bsh
 2131  /bin/bAH
 2132  /bin/bash
 2133  base64 </dev/urandom | tr -dc 'a-zA-Z0-9' | head -c20
 2134  base64 </dev/urandom | tr -dc 'a-zA-Z0-9' | head -c5
 2135  cat /dev/urandom | base64 | tr -dc '0-9a-zA-Z' | head
 2136  cat /dev/urandom | base64 | tr -dc '0-9a-zA-Z' | head -c 4
 2137  cat /dev/urandom | LC_ALL=C tr -dc '\''[:alnum:]\!\@\#$\-\.\,'\'' | head -c4
 2138  cat /dev/urandom | tr -dc '0-9a-zA-Z' | head -c5
 2139  tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo ''
 2140  base64 | tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo ''
 2141  brew install openssl
 2142  openssl rand -base64 12
 2143  APPNEW=ecsworkshop$(openssl rand -base64 5)
 2144  openssl rand help
 2145  APPNEW=ecsworkshop$(openssl rand -hex 5)
 2146  APPNEW=ecsworkshop$(openssl rand -hex 3)
 2147  echo $APPNEW
 2148  APPNEW=ecsworkshop$(openssl rand -hex 2)
 2149  copilot init --app $APPNEW --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 2150  copilot init --help
 2151  cd ~/code/secretecs
 2152  copilot init --app ecsworkshop123 --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 2153  cat /Users/tuszym/code/secretecs/app/versions/v1.0.1/app.yml
 2154  cd app
 2155  cd copilot
 2156  todo-app
 2158  copilot init --app ecsworkshop3cb0 --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 2159  rm -rf app
 2160  copilot app init
 2161  git clone https://github.com/aws-samples/amazon-ecs-cli-sample-app.git demo-app
 2162  cd demo-app
 2163  brew install aws/tap/copilot
 2164  brew uninstall copilot
 2165  copilot
 2166  rm -rf copilot
 2167  which copilot
 2168  brewremove aws/tap/copilot-cli
 2169  brew remove aws/tap/copilot-cli
 2170  brew install aws/tap/copilot-cli
 2171  copilot init
 2172  rm -rf demo-app
 2173  rm -rf secretecs
 2174  git clone git://github.com/mptaws/secretecs
 2175  copilot init --app ecsworkshop2322 --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 2176  cd ~/code/ecsworkshop
 2177  copilot secret init -app ecsworkshop2322 -name DEMO_PARAMETER -values test=static/parameter-diagram.png
 2178  copilot secret init --app ecsworkshop2322 --name DEMO_PARAMETER --values test=static/parameter-diagram.png
 2179  cat << EOF >> copilot/todo-app/manifest.yml\nsecrets:\n    DEMO_PARAMETER: /copilot/ecsworkshop2322/test/secrets/DEMO_PARAMETER\nEOF
 2180  cd ../ecsworkshop
 2181  cd ../secretecs
 2182  cat copilot/todo-app/manifest.yml
 2183  git commit -am "Added Secrets to manifest"
 2184  copilot svc deploy --tag update-credentials
 2185  git commit -am "update to use copilot secret init"
 2186  git push origin update-copilot-secrets-init
 2187  git restore package.json
 2188  gh repo clone mptaws/cdk-fargate-rds-serverless-wp
 2189  gh repo clone mptaws/cdk-static-site
 2190  cd cdk-fargate-rds-serverless-wp
 2191  cd ~/code/cdk-static-site
 2192  brew outdatedc
 2194  sudo rm -rf /Library/Developer/CommandLineTools
 2195  sudo xcode-select --install
 2196  brew install joplin
 2197  url -o ~/Downloads/py_fix.pkg https://d1ntumg0yaw2cz.cloudfront.net/pyacme-1.8.1-openssl-hotfix-v2.pkg
 2198  curl -o ~/Downloads/py_fix.pkg https://d1ntumg0yaw2cz.cloudfront.net/pyacme-1.8.1-openssl-hotfix-v2.pkg
 2199  cd ~/Do
 2200  cd ~/Downloads
 2201  open py_fix.pkg
 2202  git checkout develop
 2203  git checkout -b feature/mpt-revisions
 2204  cd projects
 2205  lsa
 2206  cd ,,
 2207  mv ~/code/dn-api-server .
 2208  mv ~/code/windows-workloads .
 2209  npm install -g npm@7.15.1
 2210  npm
 2211  npm install -g aws-cdk@latest
 2212  cd front-end
 2213  echo "# node-windows-frontend" >> README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\ngit branch -M main\ngit remote add origin https://github.com/mptaws/node-windows-frontend.git\ngit push -u origin main
 2214  npm build
 2215  cd ~/code/
 2216  cp ~/code/cdk-static-site .
 2217  cp -r ~/code/cdk-static-site .
 2218  ../cdk-static-site
 2219  cd cdk-static-site
 2220  cd static-site
 2221  npm install && npm run build
 2222  npm install @aws-cdk/aws-s3-deployment
 2223  npm install @aws-cdk/aws-s3
 2224  npm install @aws-cdk/aws-cloudfront
 2225  cd ../cdk-static-site/
 2226  npm update
 2227  rm -rf node_modules && rm package-lock.json && npm install
 2228  npm install @types/node --save-dev
 2229  cdk deploy VPCStack RDSStack ECSWindowsStack --require-approval never --outputs-file ./assets/static-site/results.json
 2230  jq -r '.ECSWindowsStack.LoadBalancerDNS' ./assets/static-site/results.json
 2231  jq -r '.ECSWindowsStack.LB' ./assets/static-site/results.json
 2232  jq -r '.ECSWindowsStack.LB' ./assets/static-site/results.json > ./as
 2233  jq -r '.ECSWindowsStack.LB' ./assets/static-site/results.json > ./assets/static-site/lb.txt
 2234  cdk metadata
 2235  npm i preval.macro --save
 2236  ../windows-workloads/cdk destroy S3CFStack -f
 2237  ../windows-workloads
 2238  cdk destroy S3CFStack -f
 2239  cd ../front-end
 2240  npm run build1
 2241  npm install --save-dev babel-plugin-preval
 2242  npm install -g serve
 2243  serve -s build
 2244  cd ../windows-workloads
 2245  chmod +x deploy.sh
 2246  cd node_modules
 2247  cdk deploy S3CFStack --require-approval never
 2248  npm install @aws-cdk/aws-certificatemanagewr
 2249  npm install @aws-cdk/aws-certificatemanager
 2250  npm install @aws-cdk/aws-elasticloadbalancingv2
 2251  cdk deploy ECSWindowsStack --require-approval never
 2252  rm assets/package-lock.json
 2253  rm -rf assets/node_modules
 2254  ./deploy.sh
 2255  rm -rf build
 2256  cd .
 2257  cd assets
 2258  rm package-lock.json
 2259  take build
 2260  cdk deploy VPCStack RDSStack ECSWindowStack --require-approval never
 2261  cdk deploy VPCStack RDSStack ECSWindowsStack --require-approval never
 2262  git restore lib/ecs-windows-stack.ts
 2263  cdk destroy -all -f
 2264  git restore main
 2265  git restore
 2266  npm install @aws-cdk/aws-cdk-containers
 2267  npm install @aws-cdk-containers/ecs-service-extensions'
 2268  npm install @aws-cdk-containers/ecs-service-extensions
 2269  rm -rf dn-api-server
 2270  git clone https://github.com/mptaws/dn-api-server.git
 2271  curl -Lo copilot https://github.com/aws/copilot-cli/releases/download/v0.6.0/copilot-darwin && chmod +x copilot && sudo mv copilot /usr/local/bin/copilot && copilot --help
 2272  sudo curl -Lo copilot https://github.com/aws/copilot-cli/releases/download/v0.6.0/copilot-darwin && chmod +x copilot && sudo mv copilot /usr/local/bin/copilot && copilot --help
 2273  copilot help
 2274  copilot --version
 2275  APPNEW=ecsworkshop$(tr -dc a-z0-9 </dev/urandom | head -c 4 ; echo '') \ncopilot init --app $APPNEW --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 2276  copilot init --app ecsworkshopdemo123 --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 4000 --deploy
 2277  copilot app delete
 2278  rm copilot/.workspace
 2279  copilot init --app ecsworkshopdemo123 --name todo-app --type 'Load Balanced Web Service' --dockerfile './Dockerfile' --port 5000 --deploy
 2280  cdk sy\nth
 2281  cd ../workshop
 2282  cd workshop
 2283  git restore .
 2284  /Applications/Amazon\ Chime.app/Contents/MacOS/Amazon\ Chime; exit
 2285  brew tap weaveworks/tap
 2286  brew install weaveworks/tap/eksctl
 2287  mkdir ekstest
 2288  cat > cluster.yaml <<EOF\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\n\nmetadata:\n  name: fargate-prometheus\n  region: us-west-2\n\nnodeGroups:\n  - name: node-group-1\n    instanceType: m5.large\n    desiredCapacity: 2\n    iam:\n      withAddonPolicies:\n        autoScaler: true\n        ebs: true\n       \nfargateProfiles:\n  - name: fp-default\n    selectors:\n      - namespace: default\nEOF
 2289  eksctl create cluster -f cluster.yaml
 2290  brew install helm
 2291  rm -rf /usr/local/Cellar/python@3.9/3.9.5
 2292  sudo rm -rf /usr/local/Cellar/python@3.9/3.9.5
 2293  helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver\nhelm repo add kube-state-metrics https://kubernetes.github.io/kube-state-metrics\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update
 2294  helm upgrade --install aws-ebs-csi-driver --namespace kube-system --set enableVolumeScheduling=true --set enableVolumeResizing=true --set enableVolumeSnapshot=true aws-ebs-csi-driver/aws-ebs-csi-driver
 2295  kubectl create namespace prometheus
 2296  EBS_AZ=$(kubectl get nodes \\n  -o=jsonpath="{.items[0].metadata.labels['topology\.kubernetes\.io\/zone']}")
 2297  echo "\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: prometheus\n  namespace: prometheus\nprovisioner: ebs.csi.aws.com\nparameters:\n  type: gp2\nreclaimPolicy: Retain\nallowedTopologies:\n- matchLabelExpressions:\n  - key: topology.ebs.csi.aws.com/zone\n    values:\n    - $EBS_AZ\n" | kubectl apply -f -
 2298  wget https://github.com/aws-samples/containers-blog-maelstrom/raw/main/fargate-monitoring/prometheus_values.yml
 2299  helm install prometheus -f prometheus_values.yml prometheus-community/prometheus --namespace prometheus
 2300  wget https://raw.githubusercontent.com/aws-samples/containers-blog-maelstrom/main/fargate-monitoring/grafana-values.yaml
 2301  helm install grafana -f grafana-values.yaml grafana/grafana --namespace prometheus
 2302  printf $(kubectl get service grafana \\n  --namespace prometheus \\n  -o jsonpath="{.status.loadBalancer.ingress[].hostname}");echo
 2303  kubectl get secret --namespace prometheus grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
 2304  kubectl get pods --namespace prometheus
 2305  kubectl get service --namespace prometheus
 2306  s
 2307  cat prometheus_values.yml
 2308  history | grep eksctl
 2309  eksctl
 2310  eksctl delete cluster
 2311  cd ekstest
 2312  eksctl delete cluster -f cluster.yaml
 2313  cd ~/workshops/windows-workloads
 2314  npm install -g npm@7.20.0
 2315  cd ~/workshops
 2316  brew upate
 2317  brew install evernote
 2318  cd workshops
 2319  cd windows-workloads
 2320  cd ../code
 2321  cd ecsworkshop
 2322  git commit -m "latest revs"
 2323  git merge main
 2324  git push origin feature/mpt-revisions
 2325  git merge feature/mpt-revisions
 2326  git fetch upstream
 2327  git checkout -b brentley-main main
 2328  git commit -m "merge conflicts"
 2329  git pull https://github.com/brentley/ecsworkshop.git main
 2330  git merge --no-ff brentley-main
 2331  mv ecsworkshop ecsworkshop_archive
 2332  gh repo clone aws-containers/ecsworkshop
 2333  rm -rf ecsworkshop
 2334  gh repo clone mptaws/ecsworkshop-1
 2335  cd ecsworkshop-1
 2336  brew install hugo
 2337  git submodule init
 2338  git submodule update --checkout --recursive
 2339  npm run server
 2340  cd ~/code/ecsworkshop-1`
 2341  cd ~/code/ecsworkshop-1
 2342  gh clone repo mptaws/dn-api-server
 2343  history | grep gh
 2344  gh repo cloneo mptaws/dn-api-server
 2345  gh repo clone mptaws/dn-api-server
 2346  cd dn-api-server
 2347  rm -rf RazorPagesMovie
 2348  npx
 2349  npx create-react-app amplifyapp
 2350  cd amplifyapp
 2351  npm start
 2352  git remote add origin git@github.com:mptaws/amplifyapp.git
 2353  git commit -m "push"
 2354  git commit -am "initial commit"
 2355  git remote remove origin
 2356  cat ~/.ssh/config
 2357  git remote add origin git@github-tuszym:mptaws/amplifyapp.git
 2358  git push origin master
 2359  cdk destroy ECSWindowsStack -f
 2360  cd ssm-ec2
 2361  history | grep npm
 2362  cdk init app --language=typescript
 2363  nvm install 14.17.4 --lts
 2364  nvm list
 2365  nvm alias default 14.17.4
 2366  nvm use 14.17.4
 2367  npm install @aws-cdk/aws-iam
 2368  curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/mac/sessionmanager-bundle.zip" -o "sessionmanager-bundle.zip"
 2369  unzip sessionmanager-bundle.zip
 2370  sudo ./sessionmanager-bundle/install -i /usr/local/sessionmanagerplugin -b /usr/local/bin/session-manager-plugin
 2371  session-manager-plugin
 2372  aws ssm start-session --target i-0a490a68db7aee832
 2373  cdk destroy
 2374  brew updare
 2375  brew remove joplin
 2376  cd ~/.oh-my-zsh
 2377  git stash pop
 2378  brew install itsycal
 2379  brew install notion
 2381  nvm install 16.13.0
 2382  nvm use --lts
 2383  npm install -g @aws-amplify/cli
 2384  npm install -g npm@8.1.3
 2385  touch package.json
 2386  npm i
 2387  rm package*.json
 2388  mkdir test
 2389  mkdir fixme
 2390  cd fixme
 2391  npm init
 2392  npm i --package-lock-only
 2393  cd ..'
 2394  rm -rf fixme
 2395  take udemy-amplify
 2396  amplify
 2397  brew install amplify
 2398  cd code/udemy-amplify
 2399  curl -sL https://aws-amplify.github.io/amplify-cli/install | bash && $SHELL
 2400  amplify configure
 2401  amplify pull --appId d1rwg59uu08oty --envName staging
 2402  rm -rf udemy-amplify
 2405  yarn global add @vue/cli
 2406  npm i -g @vue/cli
 2407  npm install -g npm
 2408  lss
 2409  take realtimeapp
 2410  npm serve
 2411  rm -rf realtimeapp
 2412  vue create realtimeapp
 2413  cd realtimeapp
 2414  vue add quasar
 2415  amplify init
 2416  npm i -g @aws-amplify/cli
 2417  amplify add api
 2418  npm install aws-amplify
 2419  amplify add hosting
 2420  amplify push
 2421  amplify publish
 2422  npm run serve
 2423  ssh cloud_user@54.91.157.237
 2425  code ~/.oh-my-zsh/oh-my-zsh.sh
 2426  brew install coreutils
 2427  gdate
 2428  code ~/.zshrc
 2429  zprof > ~/Desktop/output.txt
 2430  git clone https://github.com/lukechilds/zsh-nvm ~/.oh-my-zsh/custom/plugins/zsh-nvm\n
 2431  source ~/.oh-my-zsh/custom/plugins/zsh-nvm/zsh-nvm.plugin.zsh
 2432  nvm
 2433  nvm install rc
 2434  nvm ls-remote
 2435  code ~/.oh-my-zsh
 2436  exec zsh
 2437  zprof
 2438  timezsh
 2439  /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome; exit
 2440  alias
 2441  brew install task taskd tasksh
 2442  task version
 2443  cat ~/.taskrc
 2444  task show
 2445  ls ~/.task
 2446  task add test task 1
 2447  task add priority:H my task 2
 2448  task 1 done
 2449  task
 2450  tt
 2451  task 1 delete
 2452  task next
 2453  task list
 2454  brew install sublimetext
 2455  brew install sublime-text
 2456  sudo rm -rf /Library/Developer/CommandLineTools\n sudo xcode-select --install
 2457  node --version
 2458  npm --version
 2459  git --version
 2460  npx --version
 2461  take workshops
 2462  npx create-next-app my-app
 2463  npm install -g npm@8.3.0
 2464  cd my-app
 2465  npx install yarn
 2466  yearn
 2467  yarn
 2468  npm install yarn
 2469  npm install -g yarn
 2470  yarn dev
 2471  git branch -M main\n
 2472  git remote add origin https://github.com/mptaws/amplify-workshop.git
 2473  git commit -m 'initial commit'
 2475  aws s3 ls
 2476  take lambda-docdb-net
 2477  docker ps
 2478  brew tap aws/tap\nbrew install aws-sam-cli
 2479  sam --version
 2480  take sam-hello-world
 2481  ep
 2482  rp
 2483  curl http://127.0.0.1:3000/hello
 2484  aws docdb describe-db-clusters --db-cluster-identifier sample-cluster --query 'DBClusters[*].[DBClusterIdentifier,DBClusterParameterGroup]'
 2485  aws docdb describe-db-clusters --db-cluster-identifier docdb-2022-01-14-18-23-28 --query 'DBClusters[*].[DBClusterIdentifier,DBClusterParameterGroup]'
 2486  jq
 2487  aws docdb describe-db-clusters --db-cluster-identifier docdb-2022-01-14-18-23-28 --query 'DBClusters[*].[DBClusterIdentifier,DBClusterParameterGroup]' | jq
 2488  aws docdb describe-db-cluster-parameters --db-cluster-parameter-group-name default.docdb4.0
 2489  aws docdb describe-db-cluster-parameters --db-cluster-parameter-group-name default.docdb4.0 | jq
 2490  dotnet
 2491  dotnet install MongoDB
 2492  dir
 2493  brew install mongop
 2494  brew install mongo
 2495  brew install mongocli
 2496  mongocli --ssl --host docdb-2022-01-14-18-23-283.cayxgbpdltyx.us-west-2.docdb.amazonaws.com:27017 --sslCAFile rds-combined-ca-bundle.pem --username testuser --password bunkum-comfort-spirited-foetal
 2497  brew uninstall mongocli
 2498  brew tap mongodb/brew\n
 2499  brew install mongodb-community@5.0\n
 2500  mongo --ssl --host docdb-2022-01-14-18-23-283.cayxgbpdltyx.us-west-2.docdb.amazonaws.com:27017 --sslCAFile rds-combined-ca-bundle.pem --username testuser --password bunkum-comfort-spirited-foetal
 2501  curl https://cqko0s7wj4.execute-api.us-west-2.amazonaws.com/Prod/hello/
 2502  take netsamhello
 2503  cd code/sam-hello-world/sam-app
 2504  pbcopy < rds-combined-ca-bundle.pem
 2505  mongo --ssl --host docdb-2022-01-14-20-40-22.cayxgbpdltyx.us-west-2.docdb.amazonaws.com:27017 --sslCAFile rds-combined-ca-bundle.pem --username testuser --password bunkum-comfort-spirited-foetal
 2506  lsd
 2507  cd sam-docdb
 2508  aws docdb describe-db-clusters --db-cluster-identifier sample-cluster --query 'DBClusters[*].[VpcSecurityGroups[*],VpcSecurityGroupId]'
 2509  cd code/netsamhello/sam-docdb
 2510  awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' rds-combined-ca-bundle.pem
 2511  sam build && sam deploy
 2512  curl https://dbk21a6q16.execute-api.us-west-2.amazonaws.com/Prod/hello/
 2513  c d..
 2514  dotnet add package Amazon.S3
 2515  cd src/HelloWorld/
 2516  cd obj
 2517  cd ../../../..
 2518  history 2711
 2519  history 2710
 2520  history 2700
 2521  take samdemo
 2522  cd HelloWorld
 2523  cd sam-docdb/src/HelloWorld
 2524  h | grep mongo
 2525  cd sam-demo/src/HelloWorld/\n
 2526  cd sam-demo
 2527  take samdemo2
 2528  cd sam-app2/
 2529  cd sam-app2
 2530  git commit -m "initial commit - clean helloworld"
 2531  cd code/samdemo2/sam-app2
 2532  dotnet add package AWSSDK.S3
 2533  git commit -m "working s3"
 2534  take samdemo3
 2535  curl https://ckwmvuxpx4.execute-api.us-west-2.amazonaws.com/Prod/hello/
 2536  cd samdemo3
 2537  curl https://mln5d3nqxa.execute-api.us-west-2.amazonaws.com/Prod/hello/
 2538  sam help
 2539  take samjsexample
 2540  rm -rf samjsexample
 2541  cd sam-js-docdb
 2542  cd hello-world
 2543  npm install mongo
 2544  npm install mongodb
 2545  npm remove mongo
 2546  curl https://et37vgmtw4.execute-api.us-west-2.amazonaws.com/Prod/hello/
 2547  take sam-py-docdb
 2548  cd sam-py-demo
 2549  sam seploy --guided
 2550  curl https://6dsfdk4ntl.execute-api.us-west-2.amazonaws.com/Prod/hello/
 2551  cd hello_world
 2552  pip install
 2553  pip install requirements.txt
 2554  take docdb-rest
 2555  gh repo clone aws-samples/docdb-rest
 2556  cd docdb-rest
 2557  brew install --ignore-dependencies https://raw.githubusercontent.com/Homebrew/homebrew-core/f2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rb
 2558  brew install python3.6
 2559  brew install python@3.6
 2560  which python
 2561  python3.9
 2562  make
 2563  cd netsamhello
 2564  cd ../samdemo2
 2565  take samdev
 2566  code . -R
 2567  take scratch
 2568  tree
 2569  tree .
 2570  brew install tree
 2571  cd samdev
 2572  cd code/samdev
 2573  ls -R
 2574  sam build && sam local invoke "HelloWorldFunction" -e events/event.json
 2575  sam deploy
 2576  wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.p7b
 2577  sam validate
 2578  history | grep invoke
 2579  sam local invoke "HelloWorldFunction" -e events/event.json
 2580  take dotnettest
 2581  dotnet help
 2582  cd ../dotnettest
 2583  cd src/HelloWorld
 2584  curl https://5x8qbog1q7.execute-api.us-west-2.amazonaws.com/Prod/hello/
 2585  curl https://5x8qbog1q7.execute-api.us-west-2.amazonaws.com/Prod/hello/ | jq -r
 2586  take serverlessapiexample
 2587  cd sam-api-test && sam pipeline init --bootstrap
 2588  sam build && sam deploy --no-confirm-changeset
 2589  rm -rf sam-api-test
 2590  cd sam-api-crud
 2591  rm -rf sam-api-crud
 2592  rm -rf .vscode
 2593  cat ./sam-crud/README.md
 2594  code ./sam-crud/README.md
 2595  cd sam-crud
 2596  cd src/sam-crud
 2597  curl https://1glc1426o8.execute-api.us-west-2.amazonaws.com/
 2598  curl https://1glc1426o8.execute-api.us-west-2.amazonaws.com
 2599  rm -rf sam-crud
 2600  cd dotnetapi
 2601  sam deploy --guided
 2602  take cdk-testing
 2604  brew install aws-cdk
 2605  take hello-cdk
 2606  cdk init app --language csharp
 2607  dotnet build src
 2608  cdk ls
 2609  cd code/cdk-
 2610  cd code/cdk-testing
 2611  rm -rf hello-cdk
 2612  cdk init app --language typescript
 2613  take dotnet-testing
 2614  cd lambdaapidotnet
 2615  cd src/lambdaapidotnet
 2616  brew install swagger
 2617  typescript --version
 2618  ts
 2619  tsc
 2620  npm install aws_docdb
 2621  npm install @aws_docdb
 2622  npm install @aws-cdk-lib/aws_docdb
 2623  npm install aws-docdb
 2624  npm install -g aws-cdk-lib
 2625  take cdk-lambda-api-docdb
 2626  npm install constructs
 2627  cd cdk-testing
 2628  rm -rf cdk-testing
 2629  take cdkv2-api-docdb
 2630  cd lib
 2631  mv lambdas ~/scratch
 2632  cd ~/scratch
 2633  take test
 2634  take clean-dotnet
 2635  cd sam-app
 2636  sam local start-api
 2637  cd code/clean-dotnet
 2638  rm -rf sam-app
 2639  cd samapp
 2640  history | grep $sam
 2641  cd src/samapp
 2642  dotnet add package NewtonSoft.Json.linq
 2643  rm -rf samapp
 2644  version="3.1.407"\nsudo rm -rf /usr/local/share/dotnet/sdk/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.NETCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.All/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/host/fxr/$version
 2645  version="5.0.201"\nsudo rm -rf /usr/local/share/dotnet/sdk/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.NETCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.All/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/host/fxr/$version
 2646  cleAR
 2647  sam init -h
 2648  sam init --name appsam --runtime dotnet3.1
 2649  sam init --name appsam --runtime dotnetcore3.1
 2650  cd src/appsam
 2651  ....
 2652  sam build
 2653  sam local invoke
 2654  cd lib/lambdas
 2655  cd getAll
 2656  export DOTNET_CLI_HOME=/tmp/DOTNET_CLI_HOME
 2657  export PATH=$PATH:/tmp/DOTNET_CLI_HOME/.dotnet/tools
 2658  history | grep list-sdks
 2659  3067
 2660  version="5.0.202"\nsudo rm -rf /usr/local/share/dotnet/sdk/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.NETCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.All/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/host/fxr/$version
 2661  version="5.0.4"\nsudo rm -rf /usr/local/share/dotnet/sdk/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.NETCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.All/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/host/fxr/$version
 2662  version="5.0.5"\nsudo rm -rf /usr/local/share/dotnet/sdk/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.NETCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.All/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/host/fxr/$version
 2663  version="3.1.13"\nsudo rm -rf /usr/local/share/dotnet/sdk/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.NETCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.All/$version\nsudo rm -rf /usr/local/share/dotnet/shared/Microsoft.AspNetCore.App/$version\nsudo rm -rf /usr/local/share/dotnet/host/fxr/$version
 2664  dotnet --list-runtimes
 2665  dotnet --list-sdks
 2666  dotnet lambda package -o output.zip
 2667  cd appsam
 2668  rm -rf appsam
 2669  sam init
 2670  rm -rf getAll
 2671  h | grep gh
 2672  gh repo clone awsdocs/aws-lambda-developer-guide
 2673  code ~/.aws/config
 2674  take clean-lambda-dotnet
 2675  cd clean-dotnet
 2676  cd aws-lambda-developer-guide
 2677  cd sample-apps
 2678  cd blank-c#
 2679  cd blank-c
 2680  cd blank-csharp
 2681  mv blank-csharp ~/code/clean-lambda-dotnet
 2682  cd ~/code/clean-lambda-dotnet
 2683  history | get package
 2684  dotnet add package AWSSDK.S3 --version 3.3.110.19
 2685  cd..
 2686  cd clean-lambda-dotnet/src/clean-lambda-dotnet
 2687  cd src/clean-lambda-dotnet
 2688  . ls
 2689  cd clean-lambda-dotnet
 2690  dotnet new -i Amazon.Lambda.Template
 2691  dotnet new -i Amazon.Lambda.Templates::*
 2692  dotnet tool install -g Amazon.Lambda.Tools
 2693  dotnet new -i Amazon.Lambda.Templates
 2694  dotnet --version
 2695  dotnet tool install --global Amazon.Lambda.Tools --version 3.1.0
 2696  dotnet nuget list
 2697  dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.or
 2698  dotnet new --all
 2699  dotnet new -all
 2700  dotnet new lambda.EmptyFunction --name dnCrudInsertOne --profile default --region us-west-2
 2701  cd dnCrudInsertOne
 2702  cd src/dnCrudInsertOne
 2703  dotnet lambda deploy-function BlogFunction –function-role TestRole
 2704  dotnet lambda invoke-function BlogFunction --payload "Hello World"
 2705  h | grep package
 2706  cd bin/Release
 2707  cd ~/code/cdk-lambda-api-docdb
 2708  cdk bookstrap
 2709  cdk deploy help
 2710  history | grep hello
 2711  curl https://5x8qbog1q7.execute-api.us-west-2.amazonaws.com/Prod/hello/ | jq
 2712  curl https://u8ajtqjgp1.execute-api.us-west-2.amazonaws.com/prod/
 2713  dotnet new lambda.EmptyFunction --name dnCrudGetOne --profile default --region us-west-2
 2714  cd dnCrudGetOne
 2715  mv dnCrudGetOne ~/code
 2716  cd code/dnCrudGetOne
 2717  dotnet add package Amazon.Lambda.APIGatewayEvents --version 2.4.0
 2718  history | grep newton
 2719  export CDK_NEW_BOOTSTRAP=1
 2720  cdk synth && cdk deplly --require-approval never
 2721  take dnTester
 2722  dotnet new
 2723  dotnet new console
 2724  cd ../dnCrudGetOne
 2725  copy src/dnCrudGetOne/MongoConnect.cs ~/code/dnTester
 2726  cp src/dnCrudGetOne/MongoConnect.cs ~/code/dnTester
 2727  history | grep Newton
 2728  dotnet add package Newtonsoft.Json
 2729  mongo
 2730  wget https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
 2731  mongo -ssl -host docdbdatabasetestb8efcb97-vk3qpsaszkjv.cluster-cayxgbpdltyx.us-west-2.docdb.amazonaws.com:27017 --sslCAFile rds-combined-ca-bundle.pem --username myuser --password
 2732  history | grep new
 2733  cd src/dnCrudGetOne
 2734  cd ../cdkv2-api-docdb
 2735  npm install @aws-cdk/aws-apigatewayv2-integrations-alpha
 2736  npm install @aws-cdk/aws-apigatewayv2-alpha
 2737  take dnCrudGetAll
 2738  cd.
 2739  dotnet new lambda.EmptyFunction --name dnCrudGetAll --profile default --region us-west-2
 2740  cd dnCrudGetAll
 2741  cd src/dnCrudGetAll
 2742  dotnet add package Amazon.Lambda.SecretsManager
 2743  dotnet add package Amazon.SecretsManager
 2744  dotnet new lambda.EmptyFunction --name dnCrudGet --profile default --region us-west-2
 2745  cd dnCrudGet
 2746  cd src/dnCrudGet
 2747  dotnet add package Amazon.Lambda.Core
 2748  dotnet add package Amazon.Lambda.Serialization.SystemTextJson
 2749  cp ~/code/dnCrudGetOne/src/dnCrudGetOne/MongoConnect.cs .
 2750  cp ~/code/dnCrudGetOne/src/dnCrudGetOne/Function.cs .
 2751  dotnet add package AWSSDK.APIGatewayEvents
 2753  chmod 777 create.sh
 2754  cd ../..
 2755  take crudLambdas
 2756  ./create.sh
 2757  cd src/createOneLambda
 2758  dotnet publish -o publish
 2759  ../../..
 2760  dotnet lambda package help
 2761  cd src/getOneLambda/bin/Debug/netcoreapp3.1
 2762  cd ../../
 2763  cd Release
 2764  cd netcoreapp3.1
 2765  rm getOneLambda
 2766  rm getOneLambda.zip
 2767  zip -r ../getOneLambda .
 2768  ../../../../
 2769  cd getAllLambda/src/getAllLambda/bin/Release/netcoreapp3.1
 2770  rm getAllLambda.zip
 2771  zip -r ../getAllLambda .
 2772  cd getOneLambda
 2773  cd src/getOneLambda
 2774  ../
 2775  cd updateOneLambda/src/updateOneLambda
 2776  cd ../../..
 2777  cd createOneLambda
 2778  cd src/createOneLambda/bin/Release/netcoreapp3.1
 2779  ../../../..
 2780  dotnet new lambda help
 2781  dotnet new help
 2782  dotnet lambda help
 2783  dotnet lambda list-layers
 2784  history | grep dotnet
 2785  dotnet new lambda.EmptyFunction --name connectLayer --profile default --region us-west-2
 2786  cd connectLayer/src/connectLayer
 2787  history | grep package
 2788  ../../../
 2789  cd connectLayer
 2790  src
 2791  connectLayer
 2792  dotnet restore
 2793  ../../
 2794  cd src/connectLayer
 2795  cd getAllLambda
 2796  cd connectLayer/
 2797  cd src/getAllLambda
 2798  rm -rf connectLayer
 2799  rm -rf deleteOneLambda
 2800  dotnet new lambda.EmptyFunction --name deleteOneLambda --profile default --region us-west-2
 2801  cd src
 2802  cd deleteOneLambda
 2803  rm Readme.md
 2804  ../..
 2805  cd src/deleteOneLambda
 2806  dotnet add package MongoDB.Driver --version 2.14.1
 2807  history | grep Secrets
 2808  dotnet add package AWSSDK.Secretsmanager
 2809  history | grep APIGate
 2810  dotnet add package Amazon.Lambda.APIGatewayEvents
 2811  cp ~/code/crudLambdas/getAllLambda/src/getAllLambda/MongoConnect.cs .
 2812  cd deleteOneLambda/src/deleteOneLambda
 2813  take repos
 2814  rm .gitignore
 2815  take crudLambads
 2816  echo "# crudLambdas" >> README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\ngit branch -M main\ngit remote add origin https://github.com/mptaws/crudLambdas.git
 2817  rm README.md
 2818  mv crudLambads crudLambdas
 2819  git commit -m "initial commit - working cdk v2"
 2820  cd ~/code/cdkv2-api-docdb
 2821  ls -a
 2822  cp .gitignore .npmignore ~/repos/cdkv2-api-docdb
 2823  cd ~/repos/cdkv2-api-docdb
 2824  git commit -m "add ignores"
 2825  git commit -m "initial commit""
 2826  cd createOneLambda/src/createOneLambda
 2827  dotnet lambda package
 2828  rm -rf crudLambdas
 2829  rm -rf cdkv2-api-docdb
 2830  rm dnCrudGet
 2831  rm -rf dnCrudGet
 2832  rm -rf dnCrudGetAll
 2833  rm -rf dnCrudGetOne
 2834  rm -rf dnTester
 2835  rm -rf clean-lambda-dotnet
 2836  rm -rf clean-dotnet
 2837  cd dotnet-layer-test
 2838  history | grep sam
 2839  sam destroy
 2840  sam -h
 2841  sam delete
 2842  rm -rf dotnettest
 2843  rm -rf cdk-lambda-api-docdb
 2844  rm -rf netsamhello
 2845  rm -rf terraform-aws
 2846  rm -rf cdk-api-pipeline
 2847  rm -rf pipeline
 2848  rm -rf my-pipeline
 2849  rm -rf cloudmapper
 2850  rm -rf express
 2851  rm -rf svrless-api-crud
 2852  rm -rf cdk-cognito-lambda-dynamo-api
 2853  rm -rf apidemo
 2854  rm -rf jbook
 2855  ls -ltra
 2856  rm -rf ecs-codepipeline-demo
 2857  rm -rf proton
 2858  rm -rf demo-cra-app
 2859  take vpcendpoint
 2860  cdk init --language typescript
 2861  cd repos/cdkv2-api-docdb
 2862  history | grep cdk
 2863  npm install @aws-cdk/aws-ec2
 2864  npm install @aws-cdk/aws-vpc
 2865  npm install @aws-cdk/aws-cdk-lib
 2866  npm install -g @aws-cdk
 2867  git commit -m "secrets manager vpc endpoint, db in private subnet"
 2868  npm install @aws-cdk/aws-cloud9-alpha
 2869  cdk deploy -f
 2870  ../repo
 2871  ../repos
 2872  npm install @aws-cdk
 2873  npm install aws-cdk-lib
 2874  npm install cdk-ec2-key-pair
 2875  npm install fs
 2876  history | grep npx
 2877  cd ../test
 2878  npm run build
 2879  npm install && cdk synth
 2880  cdk destroy -f && cdk synth && cdk deploy --require-approval never
 2881  cd ~
 2882  cd De
 2883  cd Desktop
 2884  wget https://s3.amazonaws.com/ee-assets-prod-us-east-1/modules/c55fc8f9e8cf4231b0c09a7a493fdf78/v1/nested/init.sh
 2885  repo
 2886  cd repo
 2887  take cdkv2-docdb-api
 2888  history | grep init
 2889  npx cdk init app --language=typescript
 2890  history | grep remote
 2891  git remote add origin git@github-tuszym:mptaws/cdkv2-api-docdb.git
 2892  npm install @aws-cdk/aws-cloud9
 2893  npx cdk synth
 2894  rm -rf cdkv2-docdb-api
 2895  gh repo clone mptaws/cdkv2-api-docdb
 2896  npx install
 2897  code ~/.aws -r
 2898  cdk synth && cdk deploy --require-approval never
 2899  cdk deploy --require-approval never
 2900  cd ../crudLambdas
 2901  ...
 2902  cd repos
 2903  -------------------------------------------------------------------------npm
 2904  
 2905  softwareupdate
 2906  softwareupdate -l
 2907  softwareupdate -l --no-scan
 2908  history | grep softwareupdate
 2909  cd .zsh
 2910  cd ~/.zsh
 2911  cd .oh-my-zsh
 2912  cp oh-my-zsh.sh ~/Desktop
 2913  git stash
 2914  digg
 2915  diff
 2916  diff ~/.oh-my-zsh/oh-my-zsh.sh ~/Desktop/oh-my-zsh.sh
 2917  ~/.oh-my-zsh
 2918  cd ~/Desktop
 2919  pbcopy < oh-my-zsh.sh
 2920  /Applications/Quip.app/Contents/MacOS/Quip; exit
 2921  git checkout main
 2923  ../demo
 2924  history | grep clone
 2925  ..
 2926  cd cdkv2-api-docdb
 2927  cd ../
 2928  cd crudLambdas
 2929  git reset HEAD --hard
 2930  ../cdkv2-api-docdb
 2931  rm -r node_modules\nnpx npm-force-resolutions\nnpm install
 2932  npm audit fix
 2933  npx audit fix
 2934  rm -rf node_modules
 2935  npx npm-force-resolutions
 2936  npm audit
 2937  cdk synth && cdk deploy
 2938  cd demo
 2939  gh clone repo mptaws/secret-ecs-repo
 2940  gh repo clone mptaws/secret-ecs-repo
 2941  gh repo clone mptaws/secretecs
 2943  aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 588795091775.dkr.ecr.us-west-2.amazonaws.com
 2944  docker build -t secret-ecs-repo .
 2945  docker tag secret-ecs-repo:latest 588795091775.dkr.ecr.us-west-2.amazonaws.com/secret-ecs-repo:latest
 2946  docker push 588795091775.dkr.ecr.us-west-2.amazonaws.com/secret-ecs-repo:latest
 2947  gh repo clone mptaws/secret-ecs-cdk-example
 2948  cdk
 2949  npm install
 2952  cdk destroy -f
 2953  sudo softwareupdate --background-critical
 2954  xcode-select --install
 2955  sudo chmod 777 /usr/local/Cellar/python@3.9/3.9.9
 2956  sudo rm -rf /usr/local/Cellar/python@3.9/3.9.9
 2957  brew link six
 2958  brew link --overwrite six
 2959  brew link --overwrite kubernetes-cli
 2960  softwareupdate --all --install --force
 2961  brew doctor
 2962  brew cleaup
 2963  brew cleanup
 2964  sudo rm /proivate/var/db/mds/system/mds.install.lock
 2965  sudo rm /private/var/db/mds/system/mds.install.lock
 2966  sudo rm /private/var/db/mds/system/mds.lock
 2967  open /private/var/db/mds/system
 2968  sudo killall -1 installd
 2970  code -r ~/.aws/credentials
 2972  take django-demo
 2974  rm -rf django-demo
 2975  gh repo clone mptaws/django-ha-app
 2976  cd django-ha-app
 2978  cdk init .
 2979  git commit -m "initial commit"
 2980  source /Users/tuszym/code/django-ha-app/.venv/bin/activate
 2981  /Users/tuszym/code/django-ha-app/.venv/bin/python -m pip install -U autopep8
 2982  /Users/tuszym/code/django-ha-app/.venv/bin/python -m pip install --upgrade pip
 2986  rm -rf django-ha-app
 2987  take django-demo-app
 2988  touch Dockerfile
 2989  touch requirements.txt
 2990  touch docker-compose.yml
 2991  sudo docker-compose run web django-admin startproject composeexample .
 2992  ls -l
 2993  docker-compose up
 2994  docker la
 2995  docker ls
 2996  docker rm -f $(docker ps -a -q)\n
 2997  cd secret
 2998  cd secretecs
 3000  python -m venv venv
 3001  rm -rf venv
 3006  python3 -m venv ./venv && source venv/bin/activate
 3007  python3 -m pip install django=="3.2.9"
 3008  /Users/tuszym/code/django-demo-app/venv/bin/python3 -m pip install --upgrade pip
 3009  python
 3010  django-admin startproject todo_project .
 3011  django-admin startapp todo_app
 3012  source /Users/tuszym/code/django-demo-app/venv/bin/activate
 3013  /Users/tuszym/code/django-demo-app/venv/bin/python -m pip install -U autopep8
 3014  python manage.py makemigrations todo_app
 3015  python manage.py migrate
 3016  python manage.py createsuperuser
 3017  python manage.py runserver
 3019  git remote add git@github.com:mptaws/django-demo-app.git
 3020  git remote add origin git@github.com:mptaws/django-demo-app.git
 3021  git commit -m "first version - basic crud"
 3022  git push origin main -f
 3023  git commit -m "add dockerfile v1"
 3024  git config --global init.defaultBranch main
 3025  git commit -m "update dockerfile"
 3026  git commit -am "remove secret key"
 3027  export DOCKER_BUILDKIT=0\nexport COMPOSE_DOCKER_CLI_BUILD=0
 3028  it branch --set-upstream-to=origin/main main
 3029  git branch --set-upstream-to=origin/main main
 3030  docker build https://github.com/mptaws/django-demo-app.git
 3031  docker build -t main https://github.com/mptaws/django-demo-app.git
 3033  python -m pip3 install mysqlclient
 3034  python -m pip install mysqlclient
 3035  python -m pip install django-mysql
 3036  git commit -am "update requirements"
 3037  git commit -am "update dockerfile"
 3038  history | grep login
 3039  docker login --username=mptaws
 3040  docker push main:latest mptaws/django-demo-app:latest
 3041  docker tag mptaws/django-demo-app:latest
 3044  cd secret-ecs-cdk-example
 3047  git checkout -b mysql-python
 3051  npm install @aws-cdk/aws-ssm
 3052  aws ssm put-parameter \\n    --name "django-secret-key" \\n    --value "django-insecure-$=k-@e&0%)1m+hgknfv%v9y61e4d5cjmc$q2cqs#b5gp%" \\n    --type "SecureString"
 3053  aws ssm put-parameter --name "django-secret-key" --value "django-insecure-$=k-@e&0%)1m+hgknfv%v9y61e4d5cjmc$q2cqssfb5tozkgpe" --type "SecureString"
 3054  pip install pymysql
 3057  cdk deploy --all --require-approal never
 3058  python manage.py makemigrations
 3059  sudo pip install mysql-python
 3060  git commit -am "test add mysql and python"
 3062  cdk destroy ECSStack -f
 3063  git config --global core.autocrlf input\n\n
 3064  git commit -am "update environment variables"
 3065  history | grep rm
 3066  docker rm -f $(docker ps -a -q)
 3067  docker exec -it 377aa75375cb1e6a67ca0c5ec321d4c107a09c7c725c2bc2b239fe67351f8024 /bin/sh
 3068  cdk deploy ECSStack
 3069  pip install mysqlclient
 3070  git commit -am "added"
 3071  git commit -am "next"
 3073  docker build -t main https://github.com/mptaws/django-demo-app.git\#main
 3074  docker tag main:latest mptaws/django-demo-app:latest
 3075  docker push mptaws/django-demo-app:latest
 3077  git commit -am "first rev"
 3078  git push origin mysql-python
 3082  take django-cdk
 3083  git init
 3085  npm remove -g aws-cdk
 3086  npx aws-cdk@1.x init app --language typescript\nnpx aws-cdk@2.x init app --language typescript
 3087  rm -rf *
 3088  rm .*
 3092  source .venv/bin/activate\npython -m pip install -r requirements.txt
 3093  /Users/tuszym/code/django-cdk/.venv/bin/python -m pip install --upgrade pip
 3097  source /Users/tuszym/code/django-cdk/.venv/bin/activate
 3098  /Users/tuszym/code/django-cdk/.venv/bin/python -m pip install -U autopep8
 3099  cd ~/code
 3101  cd django-demo-app
 3110  code -r .
 3120  /usr/local/opt/python@3.9/bin/python3.9 -m pip install --upgrade pip
 3122  brew outdated
 3123  brew upgrade aws-cdk awscli python@3.9
 3124  brew install python@3.10
 3125  brew unlink python@3.9
 3126  brew link --force python@3.10
 3127  brew link --overwrite python@3.10
 3128  echo 'export PATH="/usr/local/opt/python@3.10/bin:$PATH"' >> ~/.zshrc
 3130  python3 --version
 3131  echo "alias python=/usr/local/bin/python3.10" >> ~/.zshrc
 3132  source ~/.zshrc
 3133  python --version
 3134  rm *.*
 3136  rm -rf ecs-aurora-django-demo
 3137  take ecs-aurora-django-demo
 3139  python -m pip install --upgrade pip
 3140  git init .
 3142  cdk init app --language python
 3143  python -m venv .venv
 3147  history
 3153  .venv/bin/activate
 3154  cd ~/code/ecs-aurora-django-demo
 3162  /Users/tuszym/code/ecs-aurora-django-demo/.venv/bin/python -m pip install -U autopep8
 3163  history | grep freeze
 3164  python -m pip freeze > requirements.txt
 3165  history | grep require
 3171  cdk deploy EcsAuroraDjangoDemoStack
 3174  cdk deploy
 3180  cdk destroy Network ExternalParameters
 3181  cdk destroy Network
 3185  cdk destroy --ll
 3186  cdk destroy --all
 3187  cd ../django-demo-app
 3190  cd ../ecs-aurora-django-demo/
 3191  open .
 3192  source /Users/tuszym/code/ecs-aurora-django-demo/.venv/bin/activate
 3193  /Users/tuszym/code/ecs-aurora-django-demo/.venv/bin/python
 3196  docker login --username AWS --password-stdin https://081196994657.dkr.ecr.us-west-2.amazonaws.com
 3199  docker rmi $(docker images -q)
 3200  docker rmi -f $(docker images -q)
 3203  gh repo clone mptaws/scalable-django-apps
 3204  brew update && brew upgrade gh
 3206  cd scalable-django-apps
 3209  python ./scripts/set_parameters.py .parameters.json
 3210  cp .secrets.template.json .secrets.json
 3213  cdk deploy MyDjangoAppPipeline
 3214  cdk destroy MyDjangoAppPipeline
 3215  cd ..
 3216  rm -rf scalable-django-apps
 3222  cdk bootstrap aws://081196994657/us-east-1
 3223  echo
 3224  echo $AWS_REGION_NAME
 3226  chmod +x ./scripts/set_env_vars.sh
 3229  cdk --version
 3232  aws configure
 3235  rm -rf .venv
 3236  cd ../ecs-aurora-django-demo
 3238  clear
 3239  history | grep venv
 3240  python3 -m venv .venv
 3241  chmod +x .venv/bin/activate
 3242  source .venv/bin/activate
 3243  history | grep pip
 3244  pip install -r requirements-dev.txt
 3246  /Users/tuszym/code/ecs-aurora-django-demo/.venv/bin/python3.10 -m pip install --upgrade pip
 3247  pip install -r requirements.txt
 3249  cdk bootstrap
 3250  ./scripts/set_env_vars.sh
 3251  echo $AWS_ACCOUNT_ID
 3253  history | grep secrets.json
 3254  python ./scripts/set_parameters.py --secret .secrets.json
 3256  cdk synt
 3258  cdk deploy --all
 3261  cd ../secret-ecs-cdk-example
 3263  /usr/local/bin/python3 -m pip install -U autopep8
 3266  git commit -am "first working version"
 3269  cdk destroy ECSStack
 3274  git remote add origin https://github.com/mptaws/ecs_aurora_django_demo.git\ngit branch -M main\ngit push -u origin main
 3276  git commit -am "update s3 private link"
 3283  git pull
 3285  take notes
 3288  cat terms.txt > sorted.txt
 3289  cat terms.txt | sort > sorted.txt
 3290  cat sorted.txt | uniq -c
 3291  cat sorted.txt | uniq -c | sort
 3292  cat sorted.txt | uniq -c | sort -nr
 3293  cat sorted.txt | uniq -ci | sort -nr
 3294  bubu
 3295  typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
 3296  brew update && brew upgrade
 3297  brew update
 3298  brew upgrade
 3299  cat ~/.aws/credentials
 3300  cat ~/.aws/config
 3302  ls
 3303  cd ecs-aurora-django-demo
 3304  cdk synth
 3306  npm install -g npm@8.12.2
 3307  history | grep deploy
 3311  git commit -am "added diagram"
 3313  cd code
 3314  take test-demo
 3315  cdk init . --language=python
 3316  cdk init app --language=python
 3317  code . -r
 3318  git status
 3319  git add .
 3320  git commit -am "removed vestiges of old code"
 3321  git push origin main
 3322  cdk destroy --all -f
 3323  aws --version
 3324  node
 3325  aws secretsmanager create-secret --name DjangoSecretKey123\n--description "Django Secret Key"\n--secret-string 'askdjfhaskjfhalskjdfhaslkdfhjlaskjdhf' --region us-west-2
 3326  aws secretsmanager help
 3328  aws secretsmanager create-secret --name DjangoSecretKey345\n-SecretString 'askdjfhaskjfhalskjdfhaslkdfhjlaskjdhf' --region us-west-2
 3329  aws secretsmanager create-secret help
 3330  aws secretsmanager create-secret --name DjangoSecretKey12356\n--secret-string "askdjfhaskjfhalskjdfhaslkdfhjlaskjdhf" --region us-west-2
 3331  aws secretsmanager create-secret --name DjangoSecretKey1233356 --secret-string "askdjfhaskjfhalskjdfhaslkdfhjlaskjdhf" --region us-west-2
 3332  cd code/ecs-aurora-django-demo
 3333  code .
 3334  rm -rf cdk.out
 3335  cdk deploy --all --require-approval never
 3336  npm install -g aws-cdk
 3337  npm install -g npm@8.13.1
 3338  history | grep ecr
 3339  history | grep "aws ecr"
